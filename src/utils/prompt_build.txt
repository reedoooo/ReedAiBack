
    SYSTEM PROMPT: You are an expert UI/UX designer and React developer specializing in creating professional, immaculate styled components.
	Your knowledge spans the latest React best practices, advanced CSS techniques, and cutting-edge styled-components features.
	Your goal is to provide code and guidance for building scalable, accessible, and performant UI components.
	

    ASSISTANT INSTRUCTIONS: 
When responding to queries about React styled components:

1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

2. Provide a comprehensive solution that includes:
   - A brief explanation of the component's design rationale
   - The full styled-component code, utilizing advanced features when appropriate
   - Usage examples demonstrating the component's flexibility
   - Best practices for implementation and customization
   - Accessibility considerations (WCAG 2.1 AA compliance)

3. Utilize advanced styled-components features such as:
   - Theming and global styles
   - CSS prop for dynamic styling
   - attrs constructor for default props and HTML attributes
   - as prop for polymorphic components
   - keyframes for animations
   - createGlobalStyle for global CSS
   - css helper for reusable CSS snippets
   - styled function for extending existing components

4. Incorporate modern CSS techniques like:
   - CSS Grid and Flexbox for layout
   - CSS Custom Properties (variables) for theming
   - CSS Modules for local scoping when appropriate
   - Media queries for responsive design
   - CSS-in-JS techniques for dynamic styling based on props or state

5. Optimize for performance by:
   - Using memoization techniques (React.memo, useMemo) when appropriate
   - Leveraging CSS containment for improved rendering performance
   - Implementing code-splitting for larger component libraries

6. Ensure code quality by:
   - Following React and styled-components best practices
   - Using consistent naming conventions
   - Providing clear comments for complex logic
   - Suggesting unit and integration tests for the component

7. Offer guidance on:
   - Component composition and reusability
   - Integration with design systems
   - Potential pitfalls and how to avoid them
   - Performance optimization techniques

8. Always format your response using Markdown syntax.
Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
If requested, provide a summary of Markdown formatting guidelines.
Please return final response JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
Here's a quick reference:

	---

# Heading 1
## Heading 2
### Heading 3

**Bold text**
*Italic text*

- Bullet list item
1. Numbered list item

`Inline code`

```javascript
// Code block
const example = 'This is a code block';
```

[Link text](URL)

> Blockquote

| Table | Header |
|-------|--------|
| Cell  | Cell   |

For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Develop a color picker component for customizing UI elements.
Develop a color picker component for customizing UI elements.
Develop a color picker component for customizing UI elements.
"content": "## Color Picker Component Using Material-UI\n\nIn Material-UI, creating a color picker component to customize UI elements can be performed by combining different components. Below is a step-by-step guide to developing a color picker using Material-UI and integrating it with your application for dynamic theming.\n\n### Step 1: Install Material-UI Core and Icons\n\n```\nnpm install @mui/material @emotion/react @emotion/styled\nnpm install @mui/icons-material\n```\n\n### Step 2: Create ColorPicker Component\n\nHere's a simple implementation of a ColorPicker component utilizing `TextField` from Material-UI and the native HTML input type 'color'.\n\n```jsx\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\nfunction ColorPicker({ label, initialColor, onColorChange }) {\n  const [color, setColor] = useState(initialColor);\n\n  const handleChange = (event) => {\n    setColor(event.target.value);\n
"content": "## Color Picker Component Using Material-UI\n\nIn Material-UI, creating a color picker component to customize UI elements can be performed by combining different components. Below is a step-by-step guide to developing a color picker using Material-UI and integrating it with your application for dynamic theming.\n\n### Step 1: Install Material-UI Core and Icons\n\n```\nnpm install @mui/material @emotion/react @emotion/styled\nnpm install @mui/icons-material\n```\n\n### Step 2: Create ColorPicker Component\n\nHere's a simple implementation of a ColorPicker component utilizing `TextField` from Material-UI and the native HTML input type 'color'.\n\n```jsx\nimport React, { useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\nfunction ColorPicker({ label, initialColor, onColorChange }) {\n  const [color, setColor] = useState(initialColor);\n\n  const handleChange = (event) => {\n    setColor(event.target.value);\n
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: To develop a customized date picker with a unique color scheme and animation effects using MUI's DatePicker as a foundation, you can follow these steps:

1. **Install MUI X Date Pickers**:
   - Install the `@mui/x-date-pickers` package using npm:
   ```bash
   npm install @mui/x-date-pickers
   ```

2. **Set Up Localization Provider**:
   - Ensure you have a date adapter set up with the LocalizationProvider. For example, use `AdapterDateFns` from `@mui/x-date-pickers`:
   ```javascript
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

   function App({ children }) {
     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>{children}</LocalizationProvider>
     );
   }
   ```
### Summary
To create a customized date picker with a unique color scheme and animation effects using MUI's DatePicker as a foundation, follow these steps:
- Install the necessary packages.
- Set up the LocalizationProvider.
- Customize the DatePicker component.
- Add custom styles and animations.
- Integrate with React Hook Form if needed.

### Citations
1. - Customizing data grids and date pickers with MUI X.
2. - Installing and setting up MUI X Date Pickers.
3. - Customizing MUI X Date Pickers and their subcomponents.
4. - Example of customizing a date picker with additional properties.

### Citations List
1. https://mui.com/x/react-data-grid/custom-columns/
2. https://www.npmjs.com/package/@mui/x-date-pickers
3. https://mui.com/x
4. **Add Animation Effects**:
   - You can add animation effects by using CSS transitions or animations. For example, you can add a transition effect to the date picker input:
   ```css
   .custom-date-picker {
     transition: color 0.3s ease-in-out;
   }
   
   /* Add your custom color here */
   .custom-date-picker .MuiInputBase-input {
     color: 'customColor';
     transition: color 0.3s ease-in-out;
   }
   ```

5. **Integrate with React Hooks Form**:
   - If you're using React Hook Form, you can integrate the customized date picker with it. Here's an example of how to do it:
   ```javascript
   import { useForm } from 'react-hook-form';
   import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
function App({ children }) {
     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>{children}</LocalizationProvider>
     );
   }
   ```

3. **Customize Date Picker Component**:
   - Use the `DesktopDatePicker`, `MobileDatePicker`, or `DatePicker` component based on your requirements. For example, customize the `DesktopDatePicker`:
   ```javascript
   import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';

   function CustomDatePicker() {
     const [date, setDate] = React.useState(new Date());
function CustomDatePicker() {
     const [date, setDate] = React.useState(new Date());

     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>
         <DesktopDatePicker
           label="Custom Date Picker"
           inputFormat="MM/dd/yyyy"
           value={date}
           onChange={(newValue) => {
             setDate(newValue);
           }}
           renderInput={(params) => (
             <TextField
               {...params}
               sx={{
                 '& .MuiInputBase-input': {
                   color: 'customColor', // Define your custom color here
                 },
               }}
             />
           )}
         />
       </LocalizationProvider>
     );
   }
   ```
  EXTRACTED KEYWORDS: customized, date picker, unique color scheme, animation effects, MUI, DatePicker, foundation
  IDENTIFIED UI LIBRARIES: MUI
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: DatePicker
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Develop a customized date picker with a unique color scheme and animation effects using MUI's DatePicker as a foundation.

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS:
  To develop a customized date picker with a unique color scheme and animation effects using MUI's DatePicker as a foundation, you can follow these steps:

1. **Install MUI X Date Pickers**:
   - Install the `@mui/x-date-pickers` package using npm:
   ```bash
   npm install @mui/x-date-pickers
   ```

2. **Set Up Localization Provider**:
   - Ensure you have a date adapter set up with the LocalizationProvider. For example, use `AdapterDateFns` from `@mui/x-date-pickers`:
   ```javascript
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

   function App({ children }) {
     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>{children}</LocalizationProvider>
     );
   }
   ```

3. **Customize Date Picker Component**:
   - Use the `DesktopDatePicker`, `MobileDatePicker`, or `DatePicker` component based on your requirements. For example, customize the `DesktopDatePicker`:
   ```javascript
   import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';

   function CustomDatePicker() {
     const [date, setDate] = React.useState(new Date());

     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>
         <DesktopDatePicker
           label="Custom Date Picker"
           inputFormat="MM/dd/yyyy"
           value={date}
           onChange={(newValue) => {
             setDate(newValue);
           }}
           renderInput={(params) => (
             <TextField
               {...params}
               sx={{
                 '& .MuiInputBase-input': {
                   color: 'customColor', // Define your custom color here
                 },
               }}
             />
           )}
         />
       </LocalizationProvider>
     );
   }
   ```

4. **Add Animation Effects**:
   - You can add animation effects by using CSS transitions or animations. For example, you can add a transition effect to the date picker input:
   ```css
   .custom-date-picker {
     transition: color 0.3s ease-in-out;
   }
   
   /* Add your custom color here */
   .custom-date-picker .MuiInputBase-input {
     color: 'customColor';
     transition: color 0.3s ease-in-out;
   }
   ```

5. **Integrate with React Hooks Form**:
   - If you're using React Hook Form, you can integrate the customized date picker with it. Here's an example of how to do it:
   ```javascript
   import { useForm } from 'react-hook-form';
   import { DesktopDatePicker } from '@mui/x-date-pickers/DesktopDatePicker';
   import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
   import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';

   function CustomForm() {
     const { register, handleSubmit } = useForm();
     const [date, setDate] = React.useState(new Date());

     const onSubmit = async (data) => {
       console.log(data);
     };

     return (
       <LocalizationProvider dateAdapter={AdapterDateFns}>
         <form onSubmit={handleSubmit(onSubmit)}>
           <DesktopDatePicker
             label="Custom Date Picker"
             inputFormat="MM/dd/yyyy"
             value={date}
             onChange={(newValue) => {
               setDate(newValue);
             }}
             renderInput={(params) => (
               <TextField
                 {...register('date')}
                 {...params}
                 sx={{
                   '& .MuiInputBase-input': {
                     color: 'customColor', // Define your custom color here
                   },
                 }}
               />
             )}
           />
           <button type="submit">Submit</button>
         </form>
       </LocalizationProvider>
     );
   }
   ```

### Summary
To create a customized date picker with a unique color scheme and animation effects using MUI's DatePicker as a foundation, follow these steps:
- Install the necessary packages.
- Set up the LocalizationProvider.
- Customize the DatePicker component.
- Add custom styles and animations.
- Integrate with React Hook Form if needed.

### Citations
1. - Customizing data grids and date pickers with MUI X.
2. - Installing and setting up MUI X Date Pickers.
3. - Customizing MUI X Date Pickers and their subcomponents.
4. - Example of customizing a date picker with additional properties.

### Citations List
1. https://mui.com/x/react-data-grid/custom-columns/
2. https://www.npmjs.com/package/@mui/x-date-pickers
3. https://mui.com/x

  CITATIONS:
  

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. Please ensure your response includes:
  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  
  