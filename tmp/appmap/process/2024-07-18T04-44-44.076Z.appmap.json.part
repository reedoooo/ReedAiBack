{"version":"1.12","events":[{"event":"call","id":1,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'error'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":2,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'error'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":3,"parent_id":2,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":1},"elapsed":0.00001708301715552807},{"event":"return","thread_id":0,"id":4,"parent_id":1,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'error',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'error',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/error/error-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'error-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/error',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":2},"elapsed":0.0018689170246943831},{"event":"call","id":5,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'warn'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":6,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'warn'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":7,"parent_id":6,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":3},"elapsed":0.000005832989700138569},{"event":"return","thread_id":0,"id":8,"parent_id":5,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'warn',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'warn',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/warn/warn-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'warn-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/warn',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":4},"elapsed":0.00075833301525563},{"event":"call","id":9,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'info'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":10,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'info'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":11,"parent_id":10,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":5},"elapsed":0.000009207986295223236},{"event":"return","thread_id":0,"id":12,"parent_id":9,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'info',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'info',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/info/info-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'info-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/info',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":6},"elapsed":0.0012542500626295805},{"event":"call","id":13,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'http'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":14,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'http'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":15,"parent_id":14,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":7},"elapsed":0.00001191697083413601},{"event":"return","thread_id":0,"id":16,"parent_id":13,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'http',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'http',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/http/http-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'http-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/http',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":8},"elapsed":0.0010678339749574661},{"event":"call","id":17,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'verbose'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":18,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'verbose'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":19,"parent_id":18,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":9},"elapsed":0.00000929099041968584},{"event":"return","thread_id":0,"id":20,"parent_id":17,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'verbose',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'verbose',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/verbose/verbose-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'verbose-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/verbose',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":10},"elapsed":0.00104674999602139},{"event":"call","id":21,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'debug'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":22,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'debug'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":23,"parent_id":22,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":11},"elapsed":0.000008209026418626308},{"event":"return","thread_id":0,"id":24,"parent_id":21,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'debug',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'debug',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/debug/debug-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'debug-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/debug',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":12},"elapsed":0.0007511250441893935},{"event":"call","id":25,"thread_id":0,"method_id":"createDailyRotateFileTransport","static":true,"parameters":[{"class":"String","value":"'silly'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":41},{"event":"call","id":26,"thread_id":0,"method_id":"logFilter","static":true,"parameters":[{"class":"String","value":"'silly'","name":"level"}],"defined_class":"index","path":"src/config/logging/index.js","lineno":15},{"event":"return","thread_id":0,"id":27,"parent_id":26,"return_value":{"class":"Format","value":"Format { options: {} }","object_id":13},"elapsed":0.000008625094778835773},{"event":"return","thread_id":0,"id":28,"parent_id":25,"return_value":{"class":"DailyRotateFile","value":"DailyRotateFile {\n  _writableState: WritableState {\n    objectMode: true,\n    highWaterMark: 16,\n    finalCalled: false,\n    needDrain: false,\n    ending: false,\n    ended: false,\n    finished: false,\n    destroyed: false,\n    decodeStrings: true,\n    defaultEncoding: 'utf8',\n    length: 0,\n    writing: false,\n    corked: 0,\n    sync: true,\n    bufferProcessing: false,\n    onwrite: [Function (anonymous)],\n    writecb: null,\n    writelen: 0,\n    bufferedRequest: null,\n    lastBufferedRequest: null,\n    pendingcb: 0,\n    prefinished: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: false,\n    bufferedRequestCount: 0,\n    corkedRequestsFree: [CorkedRequest]\n  },\n  writable: true,\n  _events: [Object: null prototype] { pipe: [Function], unpipe: [Function] },\n  _eventsCount: 2,\n  _maxListeners: undefined,\n  format: Format { options: {}, Format: [Function: Format] },\n  level: 'silly',\n  handleExceptions: undefined,\n  handleRejections: undefined,\n  silent: undefined,\n  options: {\n    json: false,\n    colorize: false,\n    eol: '\\n',\n    logstash: null,\n    prettyPrint: false,\n    label: null,\n    stringify: false,\n    depth: null,\n    showLevel: true,\n    timestamp: [Function: timestamp],\n    level: 'silly',\n    filename: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/silly/silly-%DATE%.log',\n    datePattern: 'YYYY-MM-DD',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d',\n    format: [Format]\n  },\n  filename: 'silly-%DATE%.log',\n  dirname: '/Users/reedvogt/Desktop/cover-letter-generator2/src/config/logging/logs/silly',\n  logStream: EventEmitter {\n    _events: [Object: null prototype],\n    _eventsCount: 6,\n    _maxListeners: undefined,\n    auditLog: [Object],\n    end: [Function (anonymous)],\n    write: [Function: bound ],\n    [Symbol(kCapture)]: false\n  },\n  [Symbol(kCapture)]: false\n}","object_id":14},"elapsed":0.000709792017005384},{"event":"call","id":29,"thread_id":0,"method_id":"constructor","static":true,"parameters":[],"defined_class":"Embedder","path":"src/utils/ai/chat/main.js","lineno":67},{"event":"return","thread_id":0,"id":30,"parent_id":29,"elapsed":0.000012584030628204346},{"event":"call","id":31,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessions","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"folders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultContextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultModel","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultPrompt","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultTemperature","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isHome","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessions: [ [Object] ],\n  folders: [ [Object] ],\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  imagePath: { type: [Function: String] },\n  defaultContextLength: { type: [Function: Number] },\n  defaultModel: { type: [Function: String] },\n  defaultPrompt: { type: [Function: String] },\n  defaultTemperature: { type: [Function: Number] },\n  embeddingsProvider: { type: [Function: String] },\n  instructions: { type: [Function: String] },\n  sharing: { type: [Function: String] },\n  includeProfileContext: { type: [Function: Boolean] },\n  includeWorkspaceInstructions: { type: [Function: Boolean] },\n  isHome: { type: [Function: Boolean], default: false },\n  type: { type: [Function: String], required: false, enum: [Array] }\n}","object_id":15,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":32,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessions","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"folders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultContextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultModel","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultPrompt","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultTemperature","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isHome","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessions: [ [Object] ],\n  folders: [ [Object] ],\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  imagePath: { type: [Function: String] },\n  defaultContextLength: { type: [Function: Number] },\n  defaultModel: { type: [Function: String] },\n  defaultPrompt: { type: [Function: String] },\n  defaultTemperature: { type: [Function: Number] },\n  embeddingsProvider: { type: [Function: String] },\n  instructions: { type: [Function: String] },\n  sharing: { type: [Function: String] },\n  includeProfileContext: { type: [Function: Boolean] },\n  includeWorkspaceInstructions: { type: [Function: Boolean] },\n  isHome: { type: [Function: Boolean], default: false },\n  type: { type: [Function: String], required: false, enum: [Array] }\n}","object_id":15,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":33,"parent_id":32,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessions","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"folders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultContextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultModel","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultPrompt","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultTemperature","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isHome","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessions: [ [Object] ],\n  folders: [ [Object] ],\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  imagePath: { type: [Function: String] },\n  defaultContextLength: { type: [Function: Number] },\n  defaultModel: { type: [Function: String] },\n  defaultPrompt: { type: [Function: String] },\n  defaultTemperature: { type: [Function: Number] },\n  embeddingsProvider: { type: [Function: String] },\n  instructions: { type: [Function: String] },\n  sharing: { type: [Function: String] },\n  includeProfileContext: { type: [Function: Boolean] },\n  includeWorkspaceInstructions: { type: [Function: Boolean] },\n  isHome: { type: [Function: Boolean], default: false },\n  type: { type: [Function: String], required: false, enum: [Array] },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":16},"elapsed":0.000059959013015031815},{"event":"return","thread_id":0,"id":34,"parent_id":31,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    chatSessions: [Array],\n    folders: [Array],\n    name: [Object],\n    description: [Object],\n    imagePath: [Object],\n    defaultContextLength: [Object],\n    defaultModel: [Object],\n    defaultPrompt: [Object],\n    defaultTemperature: [Object],\n    embeddingsProvider: [Object],\n    instructions: [Object],\n    sharing: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    isHome: [Object],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    chatSessions: [SchemaArray],\n    folders: [SchemaArray],\n    name: [SchemaString],\n    description: [SchemaString],\n    imagePath: [SchemaString],\n    defaultContextLength: [SchemaNumber],\n    defaultModel: [SchemaString],\n    defaultPrompt: [SchemaString],\n    defaultTemperature: [SchemaNumber],\n    embeddingsProvider: [SchemaString],\n    instructions: [SchemaString],\n    sharing: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    isHome: [SchemaBoolean],\n    type: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'chatSessions.$': [SchemaObjectId], 'folders.$': [SchemaObjectId] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    chatSessions: [Array],\n    folders: [Array],\n    name: [Object],\n    description: [Object],\n    imagePath: [Object],\n    defaultContextLength: [Object],\n    defaultModel: [Object],\n    defaultPrompt: [Object],\n    defaultTemperature: [Object],\n    embeddingsProvider: [Object],\n    instructions: [Object],\n    sharing: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    isHome: [Object],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 11,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":17},"elapsed":0.0018990000244230032},{"event":"call","id":35,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"files","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"collections","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"models","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"presets","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"prompts","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"unique","class":"Boolean"},{"name":"index","class":"Boolean"}]},{"name":"parent","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"subfolders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]}],"value":"{\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  files: [ [Object] ],\n  collections: [ [Object] ],\n  models: [ [Object] ],\n  tools: [ [Object] ],\n  presets: [ [Object] ],\n  prompts: [ [Object] ],\n  description: { type: [Function: String], required: false },\n  name: {\n    type: [Function: String],\n    required: false,\n    unique: true,\n    index: true\n  },\n  parent: { type: [Function], ref: 'Folder' },\n  subfolders: [ [Object] ],\n  type: { type: [Function: String], required: false, enum: [Array] }\n}","object_id":18,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":36,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"files","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"collections","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"models","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"presets","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"prompts","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"unique","class":"Boolean"},{"name":"index","class":"Boolean"}]},{"name":"parent","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"subfolders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]}],"value":"{\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  files: [ [Object] ],\n  collections: [ [Object] ],\n  models: [ [Object] ],\n  tools: [ [Object] ],\n  presets: [ [Object] ],\n  prompts: [ [Object] ],\n  description: { type: [Function: String], required: false },\n  name: {\n    type: [Function: String],\n    required: false,\n    unique: true,\n    index: true\n  },\n  parent: { type: [Function], ref: 'Folder' },\n  subfolders: [ [Object] ],\n  type: { type: [Function: String], required: false, enum: [Array] }\n}","object_id":18,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":37,"parent_id":36,"return_value":{"class":"Object","properties":[{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"files","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"collections","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"models","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"presets","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"prompts","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"unique","class":"Boolean"},{"name":"index","class":"Boolean"}]},{"name":"parent","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"subfolders","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  files: [ [Object] ],\n  collections: [ [Object] ],\n  models: [ [Object] ],\n  tools: [ [Object] ],\n  presets: [ [Object] ],\n  prompts: [ [Object] ],\n  description: { type: [Function: String], required: false },\n  name: {\n    type: [Function: String],\n    required: false,\n    unique: true,\n    index: true\n  },\n  parent: { type: [Function], ref: 'Folder' },\n  subfolders: [ [Object] ],\n  type: { type: [Function: String], required: false, enum: [Array] },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":19},"elapsed":0.000011208932846784592},{"event":"return","thread_id":0,"id":38,"parent_id":35,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    workspaceId: [Object],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array],\n    prompts: [Array],\n    description: [Object],\n    name: [Object],\n    parent: [Object],\n    subfolders: [Array],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    workspaceId: [SchemaObjectId],\n    files: [SchemaArray],\n    collections: [SchemaArray],\n    models: [SchemaArray],\n    tools: [SchemaArray],\n    presets: [SchemaArray],\n    prompts: [SchemaArray],\n    description: [SchemaString],\n    name: [SchemaString],\n    parent: [SchemaObjectId],\n    subfolders: [SchemaArray],\n    type: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {\n    'files.$': [SchemaObjectId],\n    'collections.$': [SchemaObjectId],\n    'models.$': [SchemaObjectId],\n    'tools.$': [SchemaObjectId],\n    'presets.$': [SchemaObjectId],\n    'prompts.$': [SchemaObjectId],\n    'subfolders.$': [SchemaObjectId]\n  },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    workspaceId: [Object],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array],\n    prompts: [Array],\n    description: [Object],\n    name: [Object],\n    parent: [Object],\n    subfolders: [Array],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 12,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":20},"elapsed":0.0010670829797163606},{"event":"call","id":39,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"filePath","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"size","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"mimeType","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"metadata","class":"Object","properties":[{"name":"fileSize","class":"Function"},{"name":"fileType","class":"Function"},{"name":"lastModified","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  filePath: [Function: String],\n  data: { type: [Function], required: false },\n  size: { type: [Function: Number], required: false },\n  tokens: { type: [Function: Number], required: false },\n  type: { type: [Function: String], required: false, enum: [Array] },\n  sharing: { type: [Function: String] },\n  mimeType: { type: [Function: String], required: false },\n  metadata: {\n    fileSize: [Function: Number],\n    fileType: [Function: String],\n    lastModified: [Function: Date]\n  }\n}","object_id":21,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":40,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"filePath","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"size","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"mimeType","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"metadata","class":"Object","properties":[{"name":"fileSize","class":"Function"},{"name":"fileType","class":"Function"},{"name":"lastModified","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  filePath: [Function: String],\n  data: { type: [Function], required: false },\n  size: { type: [Function: Number], required: false },\n  tokens: { type: [Function: Number], required: false },\n  type: { type: [Function: String], required: false, enum: [Array] },\n  sharing: { type: [Function: String] },\n  mimeType: { type: [Function: String], required: false },\n  metadata: {\n    fileSize: [Function: Number],\n    fileType: [Function: String],\n    lastModified: [Function: Date]\n  }\n}","object_id":21,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":41,"parent_id":40,"return_value":{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"filePath","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"size","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"mimeType","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"metadata","class":"Object","properties":[{"name":"fileSize","class":"Function"},{"name":"fileType","class":"Function"},{"name":"lastModified","class":"Function"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  filePath: [Function: String],\n  data: { type: [Function], required: false },\n  size: { type: [Function: Number], required: false },\n  tokens: { type: [Function: Number], required: false },\n  type: { type: [Function: String], required: false, enum: [Array] },\n  sharing: { type: [Function: String] },\n  mimeType: { type: [Function: String], required: false },\n  metadata: {\n    fileSize: [Function: Number],\n    fileType: [Function: String],\n    lastModified: [Function: Date]\n  },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":22},"elapsed":0.000010709045454859734},{"event":"return","thread_id":0,"id":42,"parent_id":39,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    filePath: [Function: String],\n    data: [Object],\n    size: [Object],\n    tokens: [Object],\n    type: [Object],\n    sharing: [Object],\n    mimeType: [Object],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    filePath: [SchemaString],\n    data: [SchemaBuffer],\n    size: [SchemaNumber],\n    tokens: [SchemaNumber],\n    type: [SchemaString],\n    sharing: [SchemaString],\n    mimeType: [SchemaString],\n    'metadata.fileSize': [SchemaNumber],\n    'metadata.fileType': [SchemaString],\n    'metadata.lastModified': [SchemaDate],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { metadata: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    filePath: [Function: String],\n    data: [Object],\n    size: [Object],\n    tokens: [Object],\n    type: [Object],\n    sharing: [Object],\n    mimeType: [Object],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 13,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":23},"elapsed":0.0005475409561768174},{"event":"call","id":43,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  workspaceId: { type: [Function], ref: 'Workspace' }\n}","object_id":24,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":44,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  workspaceId: { type: [Function], ref: 'Workspace' }\n}","object_id":24,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":45,"parent_id":44,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":25},"elapsed":0.000004333094693720341},{"event":"return","thread_id":0,"id":46,"parent_id":43,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    workspaceId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    workspaceId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 14,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":26},"elapsed":0.00016862503252923489},{"event":"call","id":47,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  assistantId: { type: [Function], ref: 'Assistant' }\n}","object_id":27,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":48,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  assistantId: { type: [Function], ref: 'Assistant' }\n}","object_id":27,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":49,"parent_id":48,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":28},"elapsed":0.0000029579969123005867},{"event":"return","thread_id":0,"id":50,"parent_id":47,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    assistantId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    assistantId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    assistantId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 15,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":29},"elapsed":0.00014679203741252422},{"event":"call","id":51,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  sessionId: { type: [Function], ref: 'ChatSession' }\n}","object_id":30,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":52,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  sessionId: { type: [Function], ref: 'ChatSession' }\n}","object_id":30,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":53,"parent_id":52,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  sessionId: { type: [Function], ref: 'ChatSession' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":31},"elapsed":0.000002749962732195854},{"event":"return","thread_id":0,"id":54,"parent_id":51,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    sessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    sessionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    sessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 16,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":32},"elapsed":0.00014520902186632156},{"event":"call","id":55,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  collectionId: { type: [Function], ref: 'Collection' }\n}","object_id":33,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":56,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  collectionId: { type: [Function], ref: 'Collection' }\n}","object_id":33,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":57,"parent_id":56,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  collectionId: { type: [Function], ref: 'Collection' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":34},"elapsed":0.0000035420525819063187},{"event":"return","thread_id":0,"id":58,"parent_id":55,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    collectionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    collectionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    collectionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 17,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":35},"elapsed":0.000196165987290442},{"event":"call","id":59,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileItemId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileItemId: { type: [Function], ref: 'FileItem' },\n  messageId: { type: [Function], ref: 'Message' }\n}","object_id":36,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":60,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileItemId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileItemId: { type: [Function], ref: 'FileItem' },\n  messageId: { type: [Function], ref: 'Message' }\n}","object_id":36,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":61,"parent_id":60,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileItemId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileItemId: { type: [Function], ref: 'FileItem' },\n  messageId: { type: [Function], ref: 'Message' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":37},"elapsed":0.0000036249402910470963},{"event":"return","thread_id":0,"id":62,"parent_id":59,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileItemId: [Object],\n    messageId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileItemId: [SchemaObjectId],\n    messageId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileItemId: [Object],\n    messageId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 18,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":38},"elapsed":0.0003976660082116723},{"event":"call","id":63,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  content: { type: [Function: String], required: false },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String]\n}","object_id":39,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":64,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  content: { type: [Function: String], required: false },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String]\n}","object_id":39,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":65,"parent_id":64,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"fileId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  fileId: { type: [Function], ref: 'File' },\n  content: { type: [Function: String], required: false },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String],\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":40},"elapsed":0.000006375019438564777},{"event":"return","thread_id":0,"id":66,"parent_id":63,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    content: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    content: [SchemaString],\n    tokens: [SchemaNumber],\n    localEmbedding: [SchemaString],\n    openaiEmbedding: [SchemaString],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    content: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 19,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":41},"elapsed":0.00022937508765608072},{"event":"call","id":67,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"type","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"content","class":"Function"},{"name":"additional_kwargs","class":"Object","properties":[]}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"conversationId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"role","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"},{"name":"sequenceNumber","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[]}]}],"value":"{\n  sessionId: { type: [Function], ref: 'ChatSession' },\n  type: [Function: String],\n  data: { content: [Function: String], additional_kwargs: {} },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  userId: { type: [Function], ref: 'User' },\n  messageId: { type: [Function: String], required: false },\n  conversationId: { type: [Function: String], required: false },\n  content: { type: [Function: String], required: false },\n  role: { type: [Function: String], required: false, enum: [Array] },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String],\n  sequenceNumber: [Function: Number],\n  metadata: { type: [Function: Map], of: [Function], default: {} }\n}","object_id":42,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":68,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"type","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"content","class":"Function"},{"name":"additional_kwargs","class":"Object","properties":[]}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"conversationId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"role","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"},{"name":"sequenceNumber","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[]}]}],"value":"{\n  sessionId: { type: [Function], ref: 'ChatSession' },\n  type: [Function: String],\n  data: { content: [Function: String], additional_kwargs: {} },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  userId: { type: [Function], ref: 'User' },\n  messageId: { type: [Function: String], required: false },\n  conversationId: { type: [Function: String], required: false },\n  content: { type: [Function: String], required: false },\n  role: { type: [Function: String], required: false, enum: [Array] },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String],\n  sequenceNumber: [Function: Number],\n  metadata: { type: [Function: Map], of: [Function], default: {} }\n}","object_id":42,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":69,"parent_id":68,"return_value":{"class":"Object","properties":[{"name":"sessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"type","class":"Function"},{"name":"data","class":"Object","properties":[{"name":"content","class":"Function"},{"name":"additional_kwargs","class":"Object","properties":[]}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"messageId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"conversationId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"content","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"role","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"},{"name":"enum","class":"Array","items":{"class":"String"}}]},{"name":"tokens","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"localEmbedding","class":"Function"},{"name":"openaiEmbedding","class":"Function"},{"name":"sharing","class":"Function"},{"name":"sequenceNumber","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[]}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  sessionId: { type: [Function], ref: 'ChatSession' },\n  type: [Function: String],\n  data: { content: [Function: String], additional_kwargs: {} },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  userId: { type: [Function], ref: 'User' },\n  messageId: { type: [Function: String], required: false },\n  conversationId: { type: [Function: String], required: false },\n  content: { type: [Function: String], required: false },\n  role: { type: [Function: String], required: false, enum: [Array] },\n  tokens: { type: [Function: Number], required: false },\n  localEmbedding: [Function: String],\n  openaiEmbedding: [Function: String],\n  sharing: [Function: String],\n  sequenceNumber: [Function: Number],\n  metadata: { type: [Function: Map], of: [Function], default: {} },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":43},"elapsed":0.000005292007699608803},{"event":"return","thread_id":0,"id":70,"parent_id":67,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    sessionId: [Object],\n    type: [Function: String],\n    data: [Object],\n    assistantId: [Object],\n    userId: [Object],\n    messageId: [Object],\n    conversationId: [Object],\n    content: [Object],\n    role: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    sequenceNumber: [Function: Number],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    sessionId: [SchemaObjectId],\n    type: [SchemaString],\n    'data.content': [SchemaString],\n    'data.additional_kwargs': [SchemaMixed],\n    assistantId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    messageId: [SchemaString],\n    conversationId: [SchemaString],\n    content: [SchemaString],\n    role: [SchemaString],\n    tokens: [SchemaNumber],\n    localEmbedding: [SchemaString],\n    openaiEmbedding: [SchemaString],\n    sharing: [SchemaString],\n    sequenceNumber: [SchemaNumber],\n    metadata: [SchemaMap],\n    'metadata.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { data: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    sessionId: [Object],\n    type: [Function: String],\n    data: [Object],\n    assistantId: [Object],\n    userId: [Object],\n    messageId: [Object],\n    conversationId: [Object],\n    content: [Object],\n    role: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    sequenceNumber: [Function: Number],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 20,\n  mapPaths: [ [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":44},"elapsed":0.0007036669412627816},{"event":"call","id":71,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessionId: { type: [Function], ref: 'ChatSession' }\n}","object_id":45,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":72,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessionId: { type: [Function], ref: 'ChatSession' }\n}","object_id":45,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":73,"parent_id":72,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"chatSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  chatSessionId: { type: [Function], ref: 'ChatSession' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":46},"elapsed":0.000003583962097764015},{"event":"return","thread_id":0,"id":74,"parent_id":71,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    chatSessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    chatSessionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    chatSessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 21,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":47},"elapsed":0.00031812500674277544},{"event":"call","id":75,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"topic","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"active","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"activeSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"settings","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"contextCount","class":"Number"},{"name":"maxTokens","class":"Number"},{"name":"temperature","class":"Number"},{"name":"model","class":"String"},{"name":"topP","class":"Number"},{"name":"n","class":"Number"},{"name":"debug","class":"Boolean"},{"name":"summarizeMode","class":"Boolean"}]}]},{"name":"messages","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"stats","class":"Object","properties":[{"name":"tokenUsage","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]},{"name":"messageCount","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]}]},{"name":"tuning","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"debug","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summary","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summarizeMode","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}]}],"value":"{\n  name: { type: [Function: String], required: false },\n  topic: { type: [Function: String], required: false },\n  userId: { type: [Function], ref: 'User' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  active: { type: [Function: Boolean], required: false },\n  activeSessionId: { type: [Function], ref: 'UserActiveChatSession' },\n  settings: { type: [Function: Map], of: [Function], default: [Object] },\n  messages: [ [Object] ],\n  stats: { tokenUsage: [Object], messageCount: [Object] },\n  tuning: { type: [Function: Map], of: [Function], default: [Object] }\n}","object_id":48,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":76,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"topic","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"active","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"activeSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"settings","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"contextCount","class":"Number"},{"name":"maxTokens","class":"Number"},{"name":"temperature","class":"Number"},{"name":"model","class":"String"},{"name":"topP","class":"Number"},{"name":"n","class":"Number"},{"name":"debug","class":"Boolean"},{"name":"summarizeMode","class":"Boolean"}]}]},{"name":"messages","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"stats","class":"Object","properties":[{"name":"tokenUsage","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]},{"name":"messageCount","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]}]},{"name":"tuning","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"debug","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summary","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summarizeMode","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}]}],"value":"{\n  name: { type: [Function: String], required: false },\n  topic: { type: [Function: String], required: false },\n  userId: { type: [Function], ref: 'User' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  active: { type: [Function: Boolean], required: false },\n  activeSessionId: { type: [Function], ref: 'UserActiveChatSession' },\n  settings: { type: [Function: Map], of: [Function], default: [Object] },\n  messages: [ [Object] ],\n  stats: { tokenUsage: [Object], messageCount: [Object] },\n  tuning: { type: [Function: Map], of: [Function], default: [Object] }\n}","object_id":48,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":77,"parent_id":76,"return_value":{"class":"Object","properties":[{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"topic","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"active","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"activeSessionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"settings","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"contextCount","class":"Number"},{"name":"maxTokens","class":"Number"},{"name":"temperature","class":"Number"},{"name":"model","class":"String"},{"name":"topP","class":"Number"},{"name":"n","class":"Number"},{"name":"debug","class":"Boolean"},{"name":"summarizeMode","class":"Boolean"}]}]},{"name":"messages","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}},{"name":"stats","class":"Object","properties":[{"name":"tokenUsage","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]},{"name":"messageCount","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Number"}]}]},{"name":"tuning","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"debug","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summary","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"summarizeMode","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  name: { type: [Function: String], required: false },\n  topic: { type: [Function: String], required: false },\n  userId: { type: [Function], ref: 'User' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  assistantId: { type: [Function], ref: 'Assistant' },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  active: { type: [Function: Boolean], required: false },\n  activeSessionId: { type: [Function], ref: 'UserActiveChatSession' },\n  settings: { type: [Function: Map], of: [Function], default: [Object] },\n  messages: [ [Object] ],\n  stats: { tokenUsage: [Object], messageCount: [Object] },\n  tuning: { type: [Function: Map], of: [Function], default: [Object] },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":49},"elapsed":0.000007292022928595543},{"event":"return","thread_id":0,"id":78,"parent_id":75,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    name: [Object],\n    topic: [Object],\n    userId: [Object],\n    workspaceId: [Object],\n    assistantId: [Object],\n    model: [Object],\n    prompt: [Object],\n    active: [Object],\n    activeSessionId: [Object],\n    settings: [Object],\n    messages: [Array],\n    stats: [Object],\n    tuning: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    name: [SchemaString],\n    topic: [SchemaString],\n    userId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    assistantId: [SchemaObjectId],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    active: [SchemaBoolean],\n    activeSessionId: [SchemaObjectId],\n    settings: [SchemaMap],\n    'settings.$*': [SchemaMixed],\n    messages: [SchemaArray],\n    'stats.tokenUsage': [SchemaNumber],\n    'stats.messageCount': [SchemaNumber],\n    tuning: [SchemaMap],\n    'tuning.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'messages.$': [SchemaObjectId] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { stats: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    name: [Object],\n    topic: [Object],\n    userId: [Object],\n    workspaceId: [Object],\n    assistantId: [Object],\n    model: [Object],\n    prompt: [Object],\n    active: [Object],\n    activeSessionId: [Object],\n    settings: [Object],\n    messages: [Array],\n    stats: [Object],\n    tuning: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 22,\n  mapPaths: [ [SchemaMixed], [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":50},"elapsed":0.0006122919730842113},{"event":"call","id":79,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Function"},{"name":"name","class":"Function"},{"name":"sharing","class":"Function"},{"name":"key","class":"Function"},{"name":"value","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"label","class":"String"},{"name":"text","class":"String"},{"name":"createdBy","class":"String"},{"name":"description","class":"String"},{"name":"type","class":"String"},{"name":"style","class":"String"},{"name":"props","class":"String"},{"name":"tags","class":"Array"}]}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  content: [Function: String],\n  name: [Function: String],\n  sharing: [Function: String],\n  key: [Function: String],\n  value: [Function: String],\n  metadata: { type: [Function: Map], of: [Function], default: [Object] }\n}","object_id":51,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":80,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Function"},{"name":"name","class":"Function"},{"name":"sharing","class":"Function"},{"name":"key","class":"Function"},{"name":"value","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"label","class":"String"},{"name":"text","class":"String"},{"name":"createdBy","class":"String"},{"name":"description","class":"String"},{"name":"type","class":"String"},{"name":"style","class":"String"},{"name":"props","class":"String"},{"name":"tags","class":"Array"}]}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  content: [Function: String],\n  name: [Function: String],\n  sharing: [Function: String],\n  key: [Function: String],\n  value: [Function: String],\n  metadata: { type: [Function: Map], of: [Function], default: [Object] }\n}","object_id":51,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":81,"parent_id":80,"return_value":{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"content","class":"Function"},{"name":"name","class":"Function"},{"name":"sharing","class":"Function"},{"name":"key","class":"Function"},{"name":"value","class":"Function"},{"name":"metadata","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Object","properties":[{"name":"label","class":"String"},{"name":"text","class":"String"},{"name":"createdBy","class":"String"},{"name":"description","class":"String"},{"name":"type","class":"String"},{"name":"style","class":"String"},{"name":"props","class":"String"},{"name":"tags","class":"Array"}]}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  content: [Function: String],\n  name: [Function: String],\n  sharing: [Function: String],\n  key: [Function: String],\n  value: [Function: String],\n  metadata: { type: [Function: Map], of: [Function], default: [Object] },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":52},"elapsed":0.000004417030140757561},{"event":"return","thread_id":0,"id":82,"parent_id":79,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    content: [Function: String],\n    name: [Function: String],\n    sharing: [Function: String],\n    key: [Function: String],\n    value: [Function: String],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    content: [SchemaString],\n    name: [SchemaString],\n    sharing: [SchemaString],\n    key: [SchemaString],\n    value: [SchemaString],\n    metadata: [SchemaMap],\n    'metadata.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    content: [Function: String],\n    name: [Function: String],\n    sharing: [Function: String],\n    key: [Function: String],\n    value: [Function: String],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 23,\n  mapPaths: [ [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":53},"elapsed":0.00025454210117459297},{"event":"call","id":83,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"promptId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  promptId: { type: [Function], ref: 'Prompt' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":54,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":84,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"promptId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  promptId: { type: [Function], ref: 'Prompt' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":54,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":85,"parent_id":84,"return_value":{"class":"Object","properties":[{"name":"promptId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  promptId: { type: [Function], ref: 'Prompt' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":55},"elapsed":0.0000029579969123005867},{"event":"return","thread_id":0,"id":86,"parent_id":83,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    promptId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    promptId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    promptId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 24,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":56},"elapsed":0.00014708295930176973},{"event":"call","id":87,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  sharing: [Function: String]\n}","object_id":57,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":88,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  sharing: [Function: String]\n}","object_id":57,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":89,"parent_id":88,"return_value":{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"sharing","class":"Function"},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  sharing: [Function: String],\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":58},"elapsed":0.0000037909485399723053},{"event":"return","thread_id":0,"id":90,"parent_id":87,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 25,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":59},"elapsed":0.00015062501188367605},{"event":"call","id":91,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  collectionId: { type: [Function], ref: 'Collection' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":60,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":92,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  collectionId: { type: [Function], ref: 'Collection' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":60,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":93,"parent_id":92,"return_value":{"class":"Object","properties":[{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  collectionId: { type: [Function], ref: 'Collection' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":61},"elapsed":0.00000566698145121336},{"event":"return","thread_id":0,"id":94,"parent_id":91,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    collectionId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    collectionId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    collectionId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 26,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":62},"elapsed":0.00015716697089374065},{"event":"call","id":95,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"apiKey","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"baseUrl","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"label","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"maxToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isDefault","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  apiKey: { type: [Function: String], required: false },\n  baseUrl: { type: [Function: String], required: false },\n  modelId: { type: [Function: String], required: false },\n  label: { type: [Function: String] },\n  contextLength: { type: [Function: Number] },\n  maxToken: { type: [Function: Number] },\n  defaultToken: { type: [Function: Number] },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  isDefault: { type: [Function: Boolean], default: false }\n}","object_id":63,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":96,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"apiKey","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"baseUrl","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"label","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"maxToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isDefault","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  apiKey: { type: [Function: String], required: false },\n  baseUrl: { type: [Function: String], required: false },\n  modelId: { type: [Function: String], required: false },\n  label: { type: [Function: String] },\n  contextLength: { type: [Function: Number] },\n  maxToken: { type: [Function: Number] },\n  defaultToken: { type: [Function: Number] },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  isDefault: { type: [Function: Boolean], default: false }\n}","object_id":63,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":97,"parent_id":96,"return_value":{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"apiKey","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"baseUrl","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"label","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"maxToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"defaultToken","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"isDefault","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Boolean"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  apiKey: { type: [Function: String], required: false },\n  baseUrl: { type: [Function: String], required: false },\n  modelId: { type: [Function: String], required: false },\n  label: { type: [Function: String] },\n  contextLength: { type: [Function: Number] },\n  maxToken: { type: [Function: Number] },\n  defaultToken: { type: [Function: Number] },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String] },\n  isDefault: { type: [Function: Boolean], default: false },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":64},"elapsed":0.000007292022928595543},{"event":"return","thread_id":0,"id":98,"parent_id":95,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    apiKey: [Object],\n    baseUrl: [Object],\n    modelId: [Object],\n    label: [Object],\n    contextLength: [Object],\n    maxToken: [Object],\n    defaultToken: [Object],\n    name: [Object],\n    description: [Object],\n    isDefault: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    apiKey: [SchemaString],\n    baseUrl: [SchemaString],\n    modelId: [SchemaString],\n    label: [SchemaString],\n    contextLength: [SchemaNumber],\n    maxToken: [SchemaNumber],\n    defaultToken: [SchemaNumber],\n    name: [SchemaString],\n    description: [SchemaString],\n    isDefault: [SchemaBoolean],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    apiKey: [Object],\n    baseUrl: [Object],\n    modelId: [Object],\n    label: [Object],\n    contextLength: [Object],\n    maxToken: [Object],\n    defaultToken: [Object],\n    name: [Object],\n    description: [Object],\n    isDefault: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 27,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":65},"elapsed":0.00031537492759525776},{"event":"call","id":99,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  modelId: { type: [Function], ref: 'Model' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":66,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":100,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  modelId: { type: [Function], ref: 'Model' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":66,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":101,"parent_id":100,"return_value":{"class":"Object","properties":[{"name":"modelId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  modelId: { type: [Function], ref: 'Model' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":67},"elapsed":0.00000708398874849081},{"event":"return","thread_id":0,"id":102,"parent_id":99,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    modelId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    modelId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    modelId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 28,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":68},"elapsed":0.00017775001469999552},{"event":"call","id":103,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false }\n}","object_id":69,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":104,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false }\n}","object_id":69,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":105,"parent_id":104,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  folderId: { type: [Function], ref: 'Folder' },\n  name: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":70},"elapsed":0.000014750054106116295},{"event":"return","thread_id":0,"id":106,"parent_id":103,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    contextLength: [Object],\n    embeddingsProvider: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    model: [Object],\n    prompt: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    folderId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    contextLength: [SchemaNumber],\n    embeddingsProvider: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    sharing: [SchemaString],\n    temperature: [SchemaNumber],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    contextLength: [Object],\n    embeddingsProvider: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    model: [Object],\n    prompt: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 29,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":71},"elapsed":0.0025931670097634196},{"event":"call","id":107,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"presetId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  presetId: { type: [Function], ref: 'Preset' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":72,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":108,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"presetId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  presetId: { type: [Function], ref: 'Preset' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":72,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":109,"parent_id":108,"return_value":{"class":"Object","properties":[{"name":"presetId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  presetId: { type: [Function], ref: 'Preset' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":73},"elapsed":0.000015875091776251793},{"event":"return","thread_id":0,"id":110,"parent_id":107,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    presetId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    presetId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    presetId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 30,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":74},"elapsed":0.0006558749591931701},{"event":"call","id":111,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}},{"name":"toolResources","class":"Object","properties":[{"name":"codeInterpreter","class":"Object","properties":[{"name":"fileIds","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}}]}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  name: { type: [Function: String], required: false },\n  instructions: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number] },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  folderId: { type: [Function], ref: 'Folder' },\n  imagePath: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false },\n  tools: [ [Object] ],\n  toolResources: { codeInterpreter: [Object] }\n}","object_id":75,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":112,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}},{"name":"toolResources","class":"Object","properties":[{"name":"codeInterpreter","class":"Object","properties":[{"name":"fileIds","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}}]}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  name: { type: [Function: String], required: false },\n  instructions: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number] },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  folderId: { type: [Function], ref: 'Folder' },\n  imagePath: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false },\n  tools: [ [Object] ],\n  toolResources: { codeInterpreter: [Object] }\n}","object_id":75,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":113,"parent_id":112,"return_value":{"class":"Object","properties":[{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"instructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"contextLength","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"model","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"prompt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"description","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"embeddingsProvider","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"imagePath","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeProfileContext","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"includeWorkspaceInstructions","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"sharing","class":"Object","properties":[{"name":"type","class":"Function"}]},{"name":"temperature","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]},{"name":"tools","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"required","class":"Boolean"}]}]}},{"name":"toolResources","class":"Object","properties":[{"name":"codeInterpreter","class":"Object","properties":[{"name":"fileIds","class":"Array","items":{"class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}}]}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  userId: { type: [Function], ref: 'User' },\n  name: { type: [Function: String], required: false },\n  instructions: { type: [Function: String], required: false },\n  contextLength: { type: [Function: Number] },\n  model: { type: [Function: String], required: false },\n  prompt: { type: [Function: String], required: false },\n  description: { type: [Function: String], required: false },\n  embeddingsProvider: { type: [Function: String], required: false },\n  folderId: { type: [Function], ref: 'Folder' },\n  imagePath: { type: [Function: String], required: false },\n  includeProfileContext: { type: [Function: Boolean], required: false },\n  includeWorkspaceInstructions: { type: [Function: Boolean], required: false },\n  sharing: { type: [Function: String] },\n  temperature: { type: [Function: Number], required: false },\n  tools: [ [Object] ],\n  toolResources: { codeInterpreter: [Object] },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":76},"elapsed":0.000014499993994832039},{"event":"return","thread_id":0,"id":114,"parent_id":111,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    name: [Object],\n    instructions: [Object],\n    contextLength: [Object],\n    model: [Object],\n    prompt: [Object],\n    description: [Object],\n    embeddingsProvider: [Object],\n    folderId: [Object],\n    imagePath: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    tools: [Array],\n    toolResources: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    instructions: [SchemaString],\n    contextLength: [SchemaNumber],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    description: [SchemaString],\n    embeddingsProvider: [SchemaString],\n    folderId: [SchemaObjectId],\n    imagePath: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    sharing: [SchemaString],\n    temperature: [SchemaNumber],\n    tools: [SchemaDocumentArray],\n    'toolResources.codeInterpreter.fileIds': [SchemaArray],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {\n    'tools.type': [SchemaString],\n    'tools._id': [SchemaObjectId],\n    'toolResources.codeInterpreter.fileIds.$': [SchemaObjectId]\n  },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { toolResources: true, 'toolResources.codeInterpreter': true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    name: [Object],\n    instructions: [Object],\n    contextLength: [Object],\n    model: [Object],\n    prompt: [Object],\n    description: [Object],\n    embeddingsProvider: [Object],\n    folderId: [Object],\n    imagePath: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    tools: [Array],\n    toolResources: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [ [Object] ],\n  plugins: [],\n  '$id': 31,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":77},"elapsed":0.001548541011288762},{"event":"call","id":115,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  collectionId: { type: [Function], ref: 'Collection' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":78,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":116,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  collectionId: { type: [Function], ref: 'Collection' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":78,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":117,"parent_id":116,"return_value":{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"collectionId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  collectionId: { type: [Function], ref: 'Collection' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":79},"elapsed":0.000013959011994302273},{"event":"return","thread_id":0,"id":118,"parent_id":115,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    collectionId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    collectionId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    collectionId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 33,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":80},"elapsed":0.00028612499590963125},{"event":"call","id":119,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  toolId: { type: [Function], ref: 'Tool' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":81,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":120,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  toolId: { type: [Function], ref: 'Tool' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":81,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":121,"parent_id":120,"return_value":{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  toolId: { type: [Function], ref: 'Tool' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":82},"elapsed":0.0000034580007195472717},{"event":"return","thread_id":0,"id":122,"parent_id":119,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    toolId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    toolId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    toolId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 34,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":83},"elapsed":0.0002790839644148946},{"event":"call","id":123,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":84,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":124,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":84,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":125,"parent_id":124,"return_value":{"class":"Object","properties":[{"name":"assistantId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  assistantId: { type: [Function], ref: 'Assistant' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":85},"elapsed":0.000008582952432334423},{"event":"return","thread_id":0,"id":126,"parent_id":123,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 35,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":86},"elapsed":0.0003980000037699938},{"event":"call","id":127,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"url","class":"Function"},{"name":"schema","class":"Function"},{"name":"customHeaders","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  url: [Function: String],\n  schema: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  customHeaders: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  sharing: [Function: String]\n}","object_id":87,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":128,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"url","class":"Function"},{"name":"schema","class":"Function"},{"name":"customHeaders","class":"Function"},{"name":"sharing","class":"Function"}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  url: [Function: String],\n  schema: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  customHeaders: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  sharing: [Function: String]\n}","object_id":87,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":129,"parent_id":128,"return_value":{"class":"Object","properties":[{"name":"folderId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"description","class":"Function"},{"name":"url","class":"Function"},{"name":"schema","class":"Function"},{"name":"customHeaders","class":"Function"},{"name":"sharing","class":"Function"},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  folderId: { type: [Function], ref: 'Folder' },\n  userId: { type: [Function], ref: 'User' },\n  name: [Function: String],\n  description: [Function: String],\n  url: [Function: String],\n  schema: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  customHeaders: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  sharing: [Function: String],\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":88},"elapsed":0.000005875015631318092},{"event":"return","thread_id":0,"id":130,"parent_id":127,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    url: [Function: String],\n    schema: [Function],\n    customHeaders: [Function],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    url: [SchemaString],\n    schema: [SchemaMixed],\n    customHeaders: [SchemaMixed],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    url: [Function: String],\n    schema: [Function],\n    customHeaders: [Function],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 36,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":89},"elapsed":0.000460083014331758},{"event":"call","id":131,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  toolId: { type: [Function], ref: 'Tool' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":90,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":132,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]}],"value":"{\n  toolId: { type: [Function], ref: 'Tool' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' }\n}","object_id":90,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":133,"parent_id":132,"return_value":{"class":"Object","properties":[{"name":"toolId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"workspaceId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"userId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  toolId: { type: [Function], ref: 'Tool' },\n  workspaceId: { type: [Function], ref: 'Workspace' },\n  userId: { type: [Function], ref: 'User' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":91},"elapsed":0.000014125020243227482},{"event":"return","thread_id":0,"id":134,"parent_id":131,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    toolId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    toolId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    toolId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 37,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":92},"elapsed":0.00039591698441654444},{"event":"call","id":135,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"bucketId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"},{"name":"metadata","class":"Function"},{"name":"lastAccessedAt","class":"Function"},{"name":"version","class":"Function"},{"name":"pathTokens","class":"Array","items":{"class":"Function"}}],"value":"{\n  bucketId: { type: [Function], ref: 'Bucket' },\n  name: [Function: String],\n  owner: [Function: String],\n  ownerId: [Function: String],\n  metadata: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  lastAccessedAt: [Function: Date],\n  version: [Function: String],\n  pathTokens: [ [Function: String] ]\n}","object_id":93,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":136,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"bucketId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"},{"name":"metadata","class":"Function"},{"name":"lastAccessedAt","class":"Function"},{"name":"version","class":"Function"},{"name":"pathTokens","class":"Array","items":{"class":"Function"}}],"value":"{\n  bucketId: { type: [Function], ref: 'Bucket' },\n  name: [Function: String],\n  owner: [Function: String],\n  ownerId: [Function: String],\n  metadata: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  lastAccessedAt: [Function: Date],\n  version: [Function: String],\n  pathTokens: [ [Function: String] ]\n}","object_id":93,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":137,"parent_id":136,"return_value":{"class":"Object","properties":[{"name":"bucketId","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"ref","class":"String"}]},{"name":"name","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"},{"name":"metadata","class":"Function"},{"name":"lastAccessedAt","class":"Function"},{"name":"version","class":"Function"},{"name":"pathTokens","class":"Array","items":{"class":"Function"}},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  bucketId: { type: [Function], ref: 'Bucket' },\n  name: [Function: String],\n  owner: [Function: String],\n  ownerId: [Function: String],\n  metadata: [Function: SchemaMixed] {\n    schemaName: 'Mixed',\n    defaultOptions: {},\n    get: [Function (anonymous)],\n    set: [Function: set],\n    setters: []\n  },\n  lastAccessedAt: [Function: Date],\n  version: [Function: String],\n  pathTokens: [ [Function: String] ],\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":94},"elapsed":0.000012416974641382694},{"event":"return","thread_id":0,"id":138,"parent_id":135,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    bucketId: [Object],\n    name: [Function: String],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    metadata: [Function],\n    lastAccessedAt: [Function: Date],\n    version: [Function: String],\n    pathTokens: [Array],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    bucketId: [SchemaObjectId],\n    name: [SchemaString],\n    owner: [SchemaString],\n    ownerId: [SchemaString],\n    metadata: [SchemaMixed],\n    lastAccessedAt: [SchemaDate],\n    version: [SchemaString],\n    pathTokens: [SchemaArray],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'pathTokens.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    bucketId: [Object],\n    name: [Function: String],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    metadata: [Function],\n    lastAccessedAt: [Function: Date],\n    version: [Function: String],\n    pathTokens: [Array],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 38,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":95},"elapsed":0.0003097499720752239},{"event":"call","id":139,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"name","class":"Function"},{"name":"public","class":"Function"},{"name":"fileSizeLimit","class":"Function"},{"name":"allowedMimeTypes","class":"Array","items":{"class":"Function"}},{"name":"avifAutodetection","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"}],"value":"{\n  name: [Function: String],\n  public: [Function: Boolean],\n  fileSizeLimit: [Function: Number],\n  allowedMimeTypes: [ [Function: String] ],\n  avifAutodetection: [Function: Boolean],\n  owner: [Function: String],\n  ownerId: [Function: String]\n}","object_id":96,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":140,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"name","class":"Function"},{"name":"public","class":"Function"},{"name":"fileSizeLimit","class":"Function"},{"name":"allowedMimeTypes","class":"Array","items":{"class":"Function"}},{"name":"avifAutodetection","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"}],"value":"{\n  name: [Function: String],\n  public: [Function: Boolean],\n  fileSizeLimit: [Function: Number],\n  allowedMimeTypes: [ [Function: String] ],\n  avifAutodetection: [Function: Boolean],\n  owner: [Function: String],\n  ownerId: [Function: String]\n}","object_id":96,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":141,"parent_id":140,"return_value":{"class":"Object","properties":[{"name":"name","class":"Function"},{"name":"public","class":"Function"},{"name":"fileSizeLimit","class":"Function"},{"name":"allowedMimeTypes","class":"Array","items":{"class":"Function"}},{"name":"avifAutodetection","class":"Function"},{"name":"owner","class":"Function"},{"name":"ownerId","class":"Function"},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  name: [Function: String],\n  public: [Function: Boolean],\n  fileSizeLimit: [Function: Number],\n  allowedMimeTypes: [ [Function: String] ],\n  avifAutodetection: [Function: Boolean],\n  owner: [Function: String],\n  ownerId: [Function: String],\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":97},"elapsed":0.000007500057108700275},{"event":"return","thread_id":0,"id":142,"parent_id":139,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    name: [Function: String],\n    public: [Function: Boolean],\n    fileSizeLimit: [Function: Number],\n    allowedMimeTypes: [Array],\n    avifAutodetection: [Function: Boolean],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    name: [SchemaString],\n    public: [SchemaBoolean],\n    fileSizeLimit: [SchemaNumber],\n    allowedMimeTypes: [SchemaArray],\n    avifAutodetection: [SchemaBoolean],\n    owner: [SchemaString],\n    ownerId: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'allowedMimeTypes.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    name: [Function: String],\n    public: [Function: Boolean],\n    fileSizeLimit: [Function: Number],\n    allowedMimeTypes: [Array],\n    avifAutodetection: [Function: Boolean],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 39,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":98},"elapsed":0.00036441697739064693},{"event":"call","id":143,"thread_id":0,"method_id":"createSchema","static":true,"parameters":[{"class":"Object","properties":[{"name":"builders","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Array"}]},{"name":"prefix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]},{"name":"suffix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]}],"value":"{\n  builders: { type: [Function: Array], of: [Function: String], default: [] },\n  prefix: { type: [Function: String], default: '' },\n  suffix: { type: [Function: String], default: '' }\n}","object_id":99,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":11},{"event":"call","id":144,"thread_id":0,"method_id":"createSchemaFields","static":true,"parameters":[{"class":"Object","properties":[{"name":"builders","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Array"}]},{"name":"prefix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]},{"name":"suffix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]}],"value":"{\n  builders: { type: [Function: Array], of: [Function: String], default: [] },\n  prefix: { type: [Function: String], default: '' },\n  suffix: { type: [Function: String], default: '' }\n}","object_id":99,"name":"fields"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":7},{"event":"return","thread_id":0,"id":145,"parent_id":144,"return_value":{"class":"Object","properties":[{"name":"builders","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"of","class":"Function"},{"name":"default","class":"Array"}]},{"name":"prefix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]},{"name":"suffix","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"String"}]},{"name":"createdAt","class":"Object","properties":[{"name":"type","class":"Function"},{"name":"default","class":"Function"}]},{"name":"updatedAt","class":"Object","properties":[{"name":"type","class":"Function"}]}],"value":"{\n  builders: { type: [Function: Array], of: [Function: String], default: [] },\n  prefix: { type: [Function: String], default: '' },\n  suffix: { type: [Function: String], default: '' },\n  createdAt: { type: [Function: Date], default: [Function: now] },\n  updatedAt: { type: [Function: Date] }\n}","object_id":100},"elapsed":0.0000074589625000953674},{"event":"return","thread_id":0,"id":146,"parent_id":143,"return_value":{"class":"Schema","value":"Schema {\n  obj: {\n    builders: [Object],\n    prefix: [Object],\n    suffix: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    builders: [SchemaArray],\n    prefix: [SchemaString],\n    suffix: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'builders.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    builders: [Object],\n    prefix: [Object],\n    suffix: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 40,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":101},"elapsed":0.000705790938809514},{"event":"call","id":147,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'User'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    username: [Object],\n    email: [Object],\n    firstName: [Object],\n    lastName: [Object],\n    dateJoined: [Object],\n    isActive: [Object],\n    auth: [Schema],\n    authSession: [Schema],\n    profile: [Schema],\n    openai: [Schema],\n    appMetadata: [Schema],\n    workspaces: [Array],\n    assistants: [Array],\n    prompts: [Array],\n    chatSessions: [Array],\n    folders: [Array],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array]\n  },\n  paths: {\n    username: [SchemaString],\n    email: [SchemaString],\n    firstName: [SchemaString],\n    lastName: [SchemaString],\n    dateJoined: [SchemaDate],\n    isActive: [SchemaBoolean],\n    auth: [SchemaSubdocument],\n    authSession: [SchemaSubdocument],\n    profile: [SchemaSubdocument],\n    openai: [SchemaSubdocument],\n    appMetadata: [SchemaSubdocument],\n    workspaces: [SchemaArray],\n    assistants: [SchemaArray],\n    prompts: [SchemaArray],\n    chatSessions: [SchemaArray],\n    folders: [SchemaArray],\n    files: [SchemaArray],\n    collections: [SchemaArray],\n    models: [SchemaArray],\n    tools: [SchemaArray],\n    presets: [SchemaArray],\n    _id: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate]\n  },\n  aliases: {},\n  subpaths: {\n    'workspaces.$': [SchemaObjectId],\n    'assistants.$': [SchemaObjectId],\n    'prompts.$': [SchemaObjectId],\n    'chatSessions.$': [SchemaObjectId],\n    'folders.$': [SchemaObjectId],\n    'files.$': [SchemaObjectId],\n    'collections.$': [SchemaObjectId],\n    'models.$': [SchemaObjectId],\n    'tools.$': [SchemaObjectId],\n    'presets.$': [SchemaObjectId]\n  },\n  virtuals: {},\n  singleNestedPaths: {\n    'auth.password': [SchemaString],\n    'auth.management': [SchemaSubdocument],\n    'auth.chatModelPrivileges': [SchemaDocumentArray],\n    'auth.lastLogin': [SchemaDate],\n    'auth.isSuperuser': [SchemaBoolean],\n    'auth.management.rateLimit': [SchemaNumber],\n    'auth.management.createdAt': [SchemaDate],\n    'auth.management.updatedAt': [SchemaDate],\n    'auth.chatModelPrivileges.chatModelId': [SchemaObjectId],\n    'auth.chatModelPrivileges.rateLimit': [SchemaNumber],\n    'auth.chatModelPrivileges.createdAt': [SchemaDate],\n    'auth.chatModelPrivileges.updatedAt': [SchemaDate],\n    'auth.chatModelPrivileges.createdBy': [SchemaNumber],\n    'auth.chatModelPrivileges.updatedBy': [SchemaNumber],\n    'authSession.token': [SchemaString],\n    'authSession.tokenType': [SchemaString],\n    'authSession.accessToken': [SchemaString],\n    'authSession.refreshToken': [SchemaString],\n    'authSession.expiresIn': [SchemaNumber],\n    'authSession.expiresAt': [SchemaNumber],\n    'authSession.createdAt': [SchemaDate],\n    'profile.img': [SchemaString],\n    'profile.imagePath': [SchemaString],\n    'profile.profileImages': [SchemaArray],\n    'profile.selectedProfileImage': [SchemaString],\n    'profile.bio': [SchemaString],\n    'profile.displayName': [SchemaString],\n    'profile.hasOnboarded': [SchemaBoolean],\n    'profile.identity': [SchemaSubdocument],\n    'profile.openai': [SchemaSubdocument],\n    'profile.stats.totalMessages': [SchemaNumber],\n    'profile.stats.totalTokenCount': [SchemaNumber],\n    'profile.stats.totalMessages3Days': [SchemaNumber],\n    'profile.stats.totalTokenCount3Days': [SchemaNumber],\n    'profile.location.city': [SchemaString],\n    'profile.location.state': [SchemaString],\n    'profile.location.country': [SchemaString],\n    'profile.social.facebook': [SchemaString],\n    'profile.social.twitter': [SchemaString],\n    'profile.social.instagram': [SchemaString],\n    'profile.social.linkedin': [SchemaString],\n    'profile.social.github': [SchemaString],\n    'profile.social.website': [SchemaString],\n    'profile.dashboard.projects': [SchemaMap],\n    'profile.dashboard.projects.$*': [SchemaString],\n    'profile.settings.user.theme': [SchemaString],\n    'profile.settings.user.fontSize': [SchemaNumber],\n    'profile.settings.user.language': [SchemaString],\n    'profile.settings.user.timezone': [SchemaString],\n    'profile.settings.chat.presets.contextLength': [SchemaNumber],\n    'profile.settings.chat.presets.description': [SchemaString],\n    'profile.settings.chat.presets.embeddingsProvider': [SchemaString],\n    'profile.settings.chat.presets.folderId': [SchemaString],\n    'profile.settings.chat.presets.includeProfileContext': [SchemaBoolean],\n    'profile.settings.chat.presets.includeWorkspaceInstructions': [SchemaBoolean],\n    'profile.settings.chat.presets.model': [SchemaString],\n    'profile.settings.chat.presets.name': [SchemaString],\n    'profile.settings.chat.presets.prompt': [SchemaString],\n    'profile.settings.chat.presets.sharing': [SchemaString],\n    'profile.settings.chat.presets.temperature': [SchemaNumber],\n    'profile.settings.chat.presets.userId': [SchemaString],\n    'profile.identity.identityId': [SchemaString],\n    'profile.identity.userId': [SchemaString],\n    'profile.identity.identityData.email': [SchemaString],\n    'profile.identity.identityData.emailVerified': [SchemaBoolean],\n    'profile.identity.identityData.phoneVerified': [SchemaBoolean],\n    'profile.identity.identityData.sub': [SchemaString],\n    'profile.identity.provider': [SchemaString],\n    'profile.identity.lastSignInAt': [SchemaDate],\n    'profile.identity.identityData': 'nested',\n    'profile.openai.apiKey': [SchemaString],\n    'profile.openai.organizationId': [SchemaString],\n    'profile.openai.apiVersion': [SchemaString],\n    'profile.openai.projects': [SchemaArray],\n    'profile.openai.projects.$': [SchemaMixed],\n    'profile.profileImages.$': [SchemaMixed],\n    'profile.stats': 'nested',\n    'profile.location': 'nested',\n    'profile.social': 'nested',\n    'profile.dashboard': 'nested',\n    'profile.settings': 'nested',\n    'profile.settings.user': 'nested',\n    'profile.settings.chat': 'nested',\n    'profile.settings.chat.presets': 'nested',\n    'openai.apiKey': [SchemaString],\n    'openai.organizationId': [SchemaString],\n    'openai.apiVersion': [SchemaString],\n    'openai.projects': [SchemaArray],\n    'openai.projects.$': [SchemaMixed],\n    'appMetadata.provider': [SchemaString],\n    'appMetadata.providers': [SchemaArray],\n    'appMetadata.providers.$': [SchemaString]\n  },\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [ [Array], [Array] ],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    username: [Object],\n    email: [Object],\n    firstName: [Object],\n    lastName: [Object],\n    dateJoined: [Object],\n    isActive: [Object],\n    auth: [Schema],\n    authSession: [Schema],\n    profile: [Schema],\n    openai: [Schema],\n    appMetadata: [Schema],\n    workspaces: [Array],\n    assistants: [Array],\n    prompts: [Array],\n    chatSessions: [Array],\n    folders: [Array],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array],\n    _id: [Object],\n    createdAt: [Object],\n    updatedAt: [Function: Date]\n  },\n  query: {},\n  childSchemas: [ [Object], [Object], [Object], [Object], [Object] ],\n  plugins: [],\n  '$id': 10,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":102,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":148,"parent_id":147,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'User',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: [Object],\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [Array],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [Array],\n    plugins: [Array],\n    '$id': 10,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'User',\n    _closed: false,\n    opts: [Object],\n    name: 'users',\n    collectionName: 'users',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'User',\n    _closed: false,\n    opts: [Object],\n    name: 'users',\n    collectionName: 'users',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.006484957993961871},{"event":"call","id":149,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Workspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    chatSessions: [Array],\n    folders: [Array],\n    name: [Object],\n    description: [Object],\n    imagePath: [Object],\n    defaultContextLength: [Object],\n    defaultModel: [Object],\n    defaultPrompt: [Object],\n    defaultTemperature: [Object],\n    embeddingsProvider: [Object],\n    instructions: [Object],\n    sharing: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    isHome: [Object],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    chatSessions: [SchemaArray],\n    folders: [SchemaArray],\n    name: [SchemaString],\n    description: [SchemaString],\n    imagePath: [SchemaString],\n    defaultContextLength: [SchemaNumber],\n    defaultModel: [SchemaString],\n    defaultPrompt: [SchemaString],\n    defaultTemperature: [SchemaNumber],\n    embeddingsProvider: [SchemaString],\n    instructions: [SchemaString],\n    sharing: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    isHome: [SchemaBoolean],\n    type: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'chatSessions.$': [SchemaObjectId], 'folders.$': [SchemaObjectId] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    chatSessions: [Array],\n    folders: [Array],\n    name: [Object],\n    description: [Object],\n    imagePath: [Object],\n    defaultContextLength: [Object],\n    defaultModel: [Object],\n    defaultPrompt: [Object],\n    defaultTemperature: [Object],\n    embeddingsProvider: [Object],\n    instructions: [Object],\n    sharing: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    isHome: [Object],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 11,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":17,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":150,"parent_id":149,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Workspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 11,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Workspace',\n    _closed: false,\n    opts: [Object],\n    name: 'workspaces',\n    collectionName: 'workspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Workspace',\n    _closed: false,\n    opts: [Object],\n    name: 'workspaces',\n    collectionName: 'workspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0010492909932509065},{"event":"call","id":151,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'UserActiveChatSession'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    chatSessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    chatSessionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    chatSessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 21,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":47,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":152,"parent_id":151,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'UserActiveChatSession',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 21,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'UserActiveChatSession',\n    _closed: false,\n    opts: [Object],\n    name: 'useractivechatsessions',\n    collectionName: 'useractivechatsessions',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'UserActiveChatSession',\n    _closed: false,\n    opts: [Object],\n    name: 'useractivechatsessions',\n    collectionName: 'useractivechatsessions',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00022183393593877554},{"event":"call","id":153,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'ChatSession'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    name: [Object],\n    topic: [Object],\n    userId: [Object],\n    workspaceId: [Object],\n    assistantId: [Object],\n    model: [Object],\n    prompt: [Object],\n    active: [Object],\n    activeSessionId: [Object],\n    settings: [Object],\n    messages: [Array],\n    stats: [Object],\n    tuning: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    name: [SchemaString],\n    topic: [SchemaString],\n    userId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    assistantId: [SchemaObjectId],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    active: [SchemaBoolean],\n    activeSessionId: [SchemaObjectId],\n    settings: [SchemaMap],\n    'settings.$*': [SchemaMixed],\n    messages: [SchemaArray],\n    'stats.tokenUsage': [SchemaNumber],\n    'stats.messageCount': [SchemaNumber],\n    tuning: [SchemaMap],\n    'tuning.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'messages.$': [SchemaObjectId] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { stats: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [ [Array] ],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    name: [Object],\n    topic: [Object],\n    userId: [Object],\n    workspaceId: [Object],\n    assistantId: [Object],\n    model: [Object],\n    prompt: [Object],\n    active: [Object],\n    activeSessionId: [Object],\n    settings: [Object],\n    messages: [Array],\n    stats: [Object],\n    tuning: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 22,\n  mapPaths: [ [SchemaMixed], [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":50,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":154,"parent_id":153,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'ChatSession',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: [Object],\n    inherits: {},\n    callQueue: [],\n    _indexes: [Array],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 22,\n    mapPaths: [Array],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatSession',\n    _closed: false,\n    opts: [Object],\n    name: 'chatsessions',\n    collectionName: 'chatsessions',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatSession',\n    _closed: false,\n    opts: [Object],\n    name: 'chatsessions',\n    collectionName: 'chatsessions',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00031554209999740124},{"event":"call","id":155,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'ChatMessage'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    sessionId: [Object],\n    type: [Function: String],\n    data: [Object],\n    assistantId: [Object],\n    userId: [Object],\n    messageId: [Object],\n    conversationId: [Object],\n    content: [Object],\n    role: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    sequenceNumber: [Function: Number],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    sessionId: [SchemaObjectId],\n    type: [SchemaString],\n    'data.content': [SchemaString],\n    'data.additional_kwargs': [SchemaMixed],\n    assistantId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    messageId: [SchemaString],\n    conversationId: [SchemaString],\n    content: [SchemaString],\n    role: [SchemaString],\n    tokens: [SchemaNumber],\n    localEmbedding: [SchemaString],\n    openaiEmbedding: [SchemaString],\n    sharing: [SchemaString],\n    sequenceNumber: [SchemaNumber],\n    metadata: [SchemaMap],\n    'metadata.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { data: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    sessionId: [Object],\n    type: [Function: String],\n    data: [Object],\n    assistantId: [Object],\n    userId: [Object],\n    messageId: [Object],\n    conversationId: [Object],\n    content: [Object],\n    role: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    sequenceNumber: [Function: Number],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 20,\n  mapPaths: [ [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":44,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":156,"parent_id":155,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'ChatMessage',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: [Object],\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 20,\n    mapPaths: [Array],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatMessage',\n    _closed: false,\n    opts: [Object],\n    name: 'chatmessages',\n    collectionName: 'chatmessages',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatMessage',\n    _closed: false,\n    opts: [Object],\n    name: 'chatmessages',\n    collectionName: 'chatmessages',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0002452500630170107},{"event":"call","id":157,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Folder'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    workspaceId: [Object],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array],\n    prompts: [Array],\n    description: [Object],\n    name: [Object],\n    parent: [Object],\n    subfolders: [Array],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    workspaceId: [SchemaObjectId],\n    files: [SchemaArray],\n    collections: [SchemaArray],\n    models: [SchemaArray],\n    tools: [SchemaArray],\n    presets: [SchemaArray],\n    prompts: [SchemaArray],\n    description: [SchemaString],\n    name: [SchemaString],\n    parent: [SchemaObjectId],\n    subfolders: [SchemaArray],\n    type: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {\n    'files.$': [SchemaObjectId],\n    'collections.$': [SchemaObjectId],\n    'models.$': [SchemaObjectId],\n    'tools.$': [SchemaObjectId],\n    'presets.$': [SchemaObjectId],\n    'prompts.$': [SchemaObjectId],\n    'subfolders.$': [SchemaObjectId]\n  },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    workspaceId: [Object],\n    files: [Array],\n    collections: [Array],\n    models: [Array],\n    tools: [Array],\n    presets: [Array],\n    prompts: [Array],\n    description: [Object],\n    name: [Object],\n    parent: [Object],\n    subfolders: [Array],\n    type: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 12,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":20,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":158,"parent_id":157,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Folder',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 12,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Folder',\n    _closed: false,\n    opts: [Object],\n    name: 'folders',\n    collectionName: 'folders',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Folder',\n    _closed: false,\n    opts: [Object],\n    name: 'folders',\n    collectionName: 'folders',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00018933298997581005},{"event":"call","id":159,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'File'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    filePath: [Function: String],\n    data: [Object],\n    size: [Object],\n    tokens: [Object],\n    type: [Object],\n    sharing: [Object],\n    mimeType: [Object],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    filePath: [SchemaString],\n    data: [SchemaBuffer],\n    size: [SchemaNumber],\n    tokens: [SchemaNumber],\n    type: [SchemaString],\n    sharing: [SchemaString],\n    mimeType: [SchemaString],\n    'metadata.fileSize': [SchemaNumber],\n    'metadata.fileType': [SchemaString],\n    'metadata.lastModified': [SchemaDate],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { metadata: true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    filePath: [Function: String],\n    data: [Object],\n    size: [Object],\n    tokens: [Object],\n    type: [Object],\n    sharing: [Object],\n    mimeType: [Object],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 13,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":23,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":160,"parent_id":159,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'File',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: [Object],\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 13,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'File',\n    _closed: false,\n    opts: [Object],\n    name: 'files',\n    collectionName: 'files',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'File',\n    _closed: false,\n    opts: [Object],\n    name: 'files',\n    collectionName: 'files',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0001603750279173255},{"event":"call","id":161,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Assistant'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    name: [Object],\n    instructions: [Object],\n    contextLength: [Object],\n    model: [Object],\n    prompt: [Object],\n    description: [Object],\n    embeddingsProvider: [Object],\n    folderId: [Object],\n    imagePath: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    tools: [Array],\n    toolResources: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    instructions: [SchemaString],\n    contextLength: [SchemaNumber],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    description: [SchemaString],\n    embeddingsProvider: [SchemaString],\n    folderId: [SchemaObjectId],\n    imagePath: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    sharing: [SchemaString],\n    temperature: [SchemaNumber],\n    tools: [SchemaDocumentArray],\n    'toolResources.codeInterpreter.fileIds': [SchemaArray],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {\n    'tools.type': [SchemaString],\n    'tools._id': [SchemaObjectId],\n    'toolResources.codeInterpreter.fileIds.$': [SchemaObjectId]\n  },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: { toolResources: true, 'toolResources.codeInterpreter': true },\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    name: [Object],\n    instructions: [Object],\n    contextLength: [Object],\n    model: [Object],\n    prompt: [Object],\n    description: [Object],\n    embeddingsProvider: [Object],\n    folderId: [Object],\n    imagePath: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    tools: [Array],\n    toolResources: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [ [Object] ],\n  plugins: [],\n  '$id': 31,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":77,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":162,"parent_id":161,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Assistant',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: [Object],\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [Array],\n    plugins: [Array],\n    '$id': 31,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Assistant',\n    _closed: false,\n    opts: [Object],\n    name: 'assistants',\n    collectionName: 'assistants',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Assistant',\n    _closed: false,\n    opts: [Object],\n    name: 'assistants',\n    collectionName: 'assistants',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0005839170189574361},{"event":"call","id":163,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Collection'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 25,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":59,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":164,"parent_id":163,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Collection',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 25,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Collection',\n    _closed: false,\n    opts: [Object],\n    name: 'collections',\n    collectionName: 'collections',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Collection',\n    _closed: false,\n    opts: [Object],\n    name: 'collections',\n    collectionName: 'collections',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0007993330946192145},{"event":"call","id":165,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Prompt'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    content: [Function: String],\n    name: [Function: String],\n    sharing: [Function: String],\n    key: [Function: String],\n    value: [Function: String],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    content: [SchemaString],\n    name: [SchemaString],\n    sharing: [SchemaString],\n    key: [SchemaString],\n    value: [SchemaString],\n    metadata: [SchemaMap],\n    'metadata.$*': [SchemaMixed],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    content: [Function: String],\n    name: [Function: String],\n    sharing: [Function: String],\n    key: [Function: String],\n    value: [Function: String],\n    metadata: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 23,\n  mapPaths: [ [SchemaMixed] ],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":53,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":166,"parent_id":165,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Prompt',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 23,\n    mapPaths: [Array],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Prompt',\n    _closed: false,\n    opts: [Object],\n    name: 'prompts',\n    collectionName: 'prompts',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Prompt',\n    _closed: false,\n    opts: [Object],\n    name: 'prompts',\n    collectionName: 'prompts',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0006043330067768693},{"event":"call","id":167,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Preset'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    contextLength: [Object],\n    embeddingsProvider: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    model: [Object],\n    prompt: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    folderId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    contextLength: [SchemaNumber],\n    embeddingsProvider: [SchemaString],\n    includeProfileContext: [SchemaBoolean],\n    includeWorkspaceInstructions: [SchemaBoolean],\n    model: [SchemaString],\n    prompt: [SchemaString],\n    sharing: [SchemaString],\n    temperature: [SchemaNumber],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    folderId: [Object],\n    name: [Object],\n    description: [Object],\n    contextLength: [Object],\n    embeddingsProvider: [Object],\n    includeProfileContext: [Object],\n    includeWorkspaceInstructions: [Object],\n    model: [Object],\n    prompt: [Object],\n    sharing: [Object],\n    temperature: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 29,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":71,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":168,"parent_id":167,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Preset',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 29,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Preset',\n    _closed: false,\n    opts: [Object],\n    name: 'presets',\n    collectionName: 'presets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Preset',\n    _closed: false,\n    opts: [Object],\n    name: 'presets',\n    collectionName: 'presets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0003102499758824706},{"event":"call","id":169,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Tool'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    url: [Function: String],\n    schema: [Function],\n    customHeaders: [Function],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    name: [SchemaString],\n    description: [SchemaString],\n    url: [SchemaString],\n    schema: [SchemaMixed],\n    customHeaders: [SchemaMixed],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    name: [Function: String],\n    description: [Function: String],\n    url: [Function: String],\n    schema: [Function],\n    customHeaders: [Function],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 36,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":89,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":170,"parent_id":169,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Tool',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 36,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Tool',\n    _closed: false,\n    opts: [Object],\n    name: 'tools',\n    collectionName: 'tools',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Tool',\n    _closed: false,\n    opts: [Object],\n    name: 'tools',\n    collectionName: 'tools',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00033116701524704695},{"event":"call","id":171,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Model'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    folderId: [Object],\n    userId: [Object],\n    apiKey: [Object],\n    baseUrl: [Object],\n    modelId: [Object],\n    label: [Object],\n    contextLength: [Object],\n    maxToken: [Object],\n    defaultToken: [Object],\n    name: [Object],\n    description: [Object],\n    isDefault: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    folderId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    apiKey: [SchemaString],\n    baseUrl: [SchemaString],\n    modelId: [SchemaString],\n    label: [SchemaString],\n    contextLength: [SchemaNumber],\n    maxToken: [SchemaNumber],\n    defaultToken: [SchemaNumber],\n    name: [SchemaString],\n    description: [SchemaString],\n    isDefault: [SchemaBoolean],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    folderId: [Object],\n    userId: [Object],\n    apiKey: [Object],\n    baseUrl: [Object],\n    modelId: [Object],\n    label: [Object],\n    contextLength: [Object],\n    maxToken: [Object],\n    defaultToken: [Object],\n    name: [Object],\n    description: [Object],\n    isDefault: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 27,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":65,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":172,"parent_id":171,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Model',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 27,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Model',\n    _closed: false,\n    opts: [Object],\n    name: 'models',\n    collectionName: 'models',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Model',\n    _closed: false,\n    opts: [Object],\n    name: 'models',\n    collectionName: 'models',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0013351250672712922},{"event":"call","id":173,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'FileWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    workspaceId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    workspaceId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 14,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":26,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":174,"parent_id":173,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'FileWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 14,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'FileWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'fileworkspaces',\n    collectionName: 'fileworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'FileWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'fileworkspaces',\n    collectionName: 'fileworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0008461670950055122},{"event":"call","id":175,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'PromptWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    promptId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    promptId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    promptId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 24,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":56,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":176,"parent_id":175,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'PromptWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 24,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'PromptWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'promptworkspaces',\n    collectionName: 'promptworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'PromptWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'promptworkspaces',\n    collectionName: 'promptworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0007628750754520297},{"event":"call","id":177,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'CollectionWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    collectionId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    collectionId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    collectionId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 26,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":62,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":178,"parent_id":177,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'CollectionWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 26,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'CollectionWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'collectionworkspaces',\n    collectionName: 'collectionworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'CollectionWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'collectionworkspaces',\n    collectionName: 'collectionworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00024229101836681366},{"event":"call","id":179,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'ModelWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    modelId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    modelId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    modelId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 28,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":68,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":180,"parent_id":179,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'ModelWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 28,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ModelWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'modelworkspaces',\n    collectionName: 'modelworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ModelWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'modelworkspaces',\n    collectionName: 'modelworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0003934999695047736},{"event":"call","id":181,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'PresetWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    presetId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    presetId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    presetId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 30,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":74,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":182,"parent_id":181,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'PresetWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 30,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'PresetWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'presetworkspaces',\n    collectionName: 'presetworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'PresetWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'presetworkspaces',\n    collectionName: 'presetworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00018045806791633368},{"event":"call","id":183,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'AssistantWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 35,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":86,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":184,"parent_id":183,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'AssistantWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 35,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantworkspaces',\n    collectionName: 'assistantworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantworkspaces',\n    collectionName: 'assistantworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0002996249822899699},{"event":"call","id":185,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'ToolWorkspace'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    toolId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    toolId: [SchemaObjectId],\n    workspaceId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    toolId: [Object],\n    workspaceId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 37,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":92,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":186,"parent_id":185,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'ToolWorkspace',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 37,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ToolWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'toolworkspaces',\n    collectionName: 'toolworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ToolWorkspace',\n    _closed: false,\n    opts: [Object],\n    name: 'toolworkspaces',\n    collectionName: 'toolworkspaces',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0003023750614374876},{"event":"call","id":187,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'AssistantFile'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    assistantId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    assistantId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    assistantId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 15,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":29,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":188,"parent_id":187,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'AssistantFile',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 15,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantFile',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantfiles',\n    collectionName: 'assistantfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantFile',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantfiles',\n    collectionName: 'assistantfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0005680000176653266},{"event":"call","id":189,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'ChatFile'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    sessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    sessionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    sessionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 16,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":32,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":190,"parent_id":189,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'ChatFile',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 16,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatFile',\n    _closed: false,\n    opts: [Object],\n    name: 'chatfiles',\n    collectionName: 'chatfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'ChatFile',\n    _closed: false,\n    opts: [Object],\n    name: 'chatfiles',\n    collectionName: 'chatfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0005769169656559825},{"event":"call","id":191,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'CollectionFile'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    collectionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    collectionId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    collectionId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 17,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":35,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":192,"parent_id":191,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'CollectionFile',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 17,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'CollectionFile',\n    _closed: false,\n    opts: [Object],\n    name: 'collectionfiles',\n    collectionName: 'collectionfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'CollectionFile',\n    _closed: false,\n    opts: [Object],\n    name: 'collectionfiles',\n    collectionName: 'collectionfiles',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00020800007041543722},{"event":"call","id":193,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'MessageFileItem'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileItemId: [Object],\n    messageId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileItemId: [SchemaObjectId],\n    messageId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileItemId: [Object],\n    messageId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 18,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":38,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":194,"parent_id":193,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'MessageFileItem',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 18,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'MessageFileItem',\n    _closed: false,\n    opts: [Object],\n    name: 'messagefileitems',\n    collectionName: 'messagefileitems',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'MessageFileItem',\n    _closed: false,\n    opts: [Object],\n    name: 'messagefileitems',\n    collectionName: 'messagefileitems',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.000152791035361588},{"event":"call","id":195,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'FileItem'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    userId: [Object],\n    fileId: [Object],\n    content: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    userId: [SchemaObjectId],\n    fileId: [SchemaObjectId],\n    content: [SchemaString],\n    tokens: [SchemaNumber],\n    localEmbedding: [SchemaString],\n    openaiEmbedding: [SchemaString],\n    sharing: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    userId: [Object],\n    fileId: [Object],\n    content: [Object],\n    tokens: [Object],\n    localEmbedding: [Function: String],\n    openaiEmbedding: [Function: String],\n    sharing: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 19,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":41,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":196,"parent_id":195,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'FileItem',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 19,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'FileItem',\n    _closed: false,\n    opts: [Object],\n    name: 'fileitems',\n    collectionName: 'fileitems',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'FileItem',\n    _closed: false,\n    opts: [Object],\n    name: 'fileitems',\n    collectionName: 'fileitems',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00014725001528859138},{"event":"call","id":197,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'AssistantCollection'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    collectionId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    collectionId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    collectionId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 33,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":80,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":198,"parent_id":197,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'AssistantCollection',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 33,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantCollection',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantcollections',\n    collectionName: 'assistantcollections',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantCollection',\n    _closed: false,\n    opts: [Object],\n    name: 'assistantcollections',\n    collectionName: 'assistantcollections',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0005819590296596289},{"event":"call","id":199,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'AssistantTool'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    assistantId: [Object],\n    toolId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    assistantId: [SchemaObjectId],\n    toolId: [SchemaObjectId],\n    userId: [SchemaObjectId],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    assistantId: [Object],\n    toolId: [Object],\n    userId: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 34,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":83,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":200,"parent_id":199,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'AssistantTool',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 34,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantTool',\n    _closed: false,\n    opts: [Object],\n    name: 'assistanttools',\n    collectionName: 'assistanttools',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'AssistantTool',\n    _closed: false,\n    opts: [Object],\n    name: 'assistanttools',\n    collectionName: 'assistanttools',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00029624998569488525},{"event":"call","id":201,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'JwtSecret'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    name: [Object],\n    secret: [Object],\n    audience: [Object],\n    lifetime: [Object]\n  },\n  paths: {\n    name: [SchemaString],\n    secret: [SchemaString],\n    audience: [SchemaString],\n    lifetime: [SchemaNumber],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: {},\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: {},\n  methodOptions: {},\n  statics: {},\n  tree: {\n    name: [Object],\n    secret: [Object],\n    audience: [Object],\n    lifetime: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 1,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: {},\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type'\n  }\n}","object_id":103,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":202,"parent_id":201,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'JwtSecret',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: {},\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: {},\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 1,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: {},\n    options: [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'JwtSecret',\n    _closed: false,\n    opts: [Object],\n    name: 'jwtsecrets',\n    collectionName: 'jwtsecrets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'JwtSecret',\n    _closed: false,\n    opts: [Object],\n    name: 'jwtsecrets',\n    collectionName: 'jwtsecrets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.0007007080130279064},{"event":"call","id":203,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Object'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    bucketId: [Object],\n    name: [Function: String],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    metadata: [Function],\n    lastAccessedAt: [Function: Date],\n    version: [Function: String],\n    pathTokens: [Array],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    bucketId: [SchemaObjectId],\n    name: [SchemaString],\n    owner: [SchemaString],\n    ownerId: [SchemaString],\n    metadata: [SchemaMixed],\n    lastAccessedAt: [SchemaDate],\n    version: [SchemaString],\n    pathTokens: [SchemaArray],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'pathTokens.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    bucketId: [Object],\n    name: [Function: String],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    metadata: [Function],\n    lastAccessedAt: [Function: Date],\n    version: [Function: String],\n    pathTokens: [Array],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 38,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":95,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":204,"parent_id":203,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Object',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 38,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Object',\n    _closed: false,\n    opts: [Object],\n    name: 'objects',\n    collectionName: 'objects',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Object',\n    _closed: false,\n    opts: [Object],\n    name: 'objects',\n    collectionName: 'objects',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00030816695652902126},{"event":"call","id":205,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'Bucket'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    name: [Function: String],\n    public: [Function: Boolean],\n    fileSizeLimit: [Function: Number],\n    allowedMimeTypes: [Array],\n    avifAutodetection: [Function: Boolean],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    name: [SchemaString],\n    public: [SchemaBoolean],\n    fileSizeLimit: [SchemaNumber],\n    allowedMimeTypes: [SchemaArray],\n    avifAutodetection: [SchemaBoolean],\n    owner: [SchemaString],\n    ownerId: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'allowedMimeTypes.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    name: [Function: String],\n    public: [Function: Boolean],\n    fileSizeLimit: [Function: Number],\n    allowedMimeTypes: [Array],\n    avifAutodetection: [Function: Boolean],\n    owner: [Function: String],\n    ownerId: [Function: String],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 39,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":98,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":206,"parent_id":205,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'Bucket',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 39,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Bucket',\n    _closed: false,\n    opts: [Object],\n    name: 'buckets',\n    collectionName: 'buckets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'Bucket',\n    _closed: false,\n    opts: [Object],\n    name: 'buckets',\n    collectionName: 'buckets',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00029933301266282797},{"event":"call","id":207,"thread_id":0,"method_id":"createModel","static":true,"parameters":[{"class":"String","value":"'TextBuffer'","name":"name"},{"class":"Schema","value":"Schema {\n  obj: {\n    builders: [Object],\n    prefix: [Object],\n    suffix: [Object],\n    createdAt: [Object],\n    updatedAt: [Object]\n  },\n  paths: {\n    builders: [SchemaArray],\n    prefix: [SchemaString],\n    suffix: [SchemaString],\n    createdAt: [SchemaDate],\n    updatedAt: [SchemaDate],\n    _id: [SchemaObjectId]\n  },\n  aliases: {},\n  subpaths: { 'builders.$': [SchemaString] },\n  virtuals: {},\n  singleNestedPaths: {},\n  nested: {},\n  inherits: {},\n  callQueue: [],\n  _indexes: [],\n  _searchIndexes: [],\n  methods: { initializeTimestamps: [Function (anonymous)] },\n  methodOptions: {},\n  statics: {},\n  tree: {\n    builders: [Object],\n    prefix: [Object],\n    suffix: [Object],\n    createdAt: [Object],\n    updatedAt: [Object],\n    _id: [Object]\n  },\n  query: {},\n  childSchemas: [],\n  plugins: [],\n  '$id': 40,\n  mapPaths: [],\n  s: { hooks: [Kareem] },\n  _userProvidedOptions: { timestamps: true },\n  options: {\n    strict: true,\n    strictQuery: false,\n    bufferCommands: true,\n    capped: false,\n    versionKey: '__v',\n    optimisticConcurrency: false,\n    minimize: true,\n    autoIndex: null,\n    discriminatorKey: '__t',\n    shardKey: null,\n    read: null,\n    validateBeforeSave: true,\n    validateModifiedOnly: false,\n    _id: true,\n    id: true,\n    typeKey: 'type',\n    timestamps: true\n  },\n  '$timestamps': { createdAt: 'createdAt', updatedAt: 'updatedAt' }\n}","object_id":101,"name":"schema"}],"defined_class":"index","path":"src/models/utils/index.js","lineno":12},{"event":"return","thread_id":0,"id":208,"parent_id":207,"return_value":{"class":"Function","value":"[Function: model] {\n  hooks: Kareem { _pres: [Map], _posts: [Map] },\n  base: <ref *1> Mongoose {\n    connections: [Array],\n    nextConnectionId: 1,\n    models: [Object],\n    events: [EventEmitter],\n    __driver: [Object],\n    options: [Object],\n    _pluralize: [Function: pluralize],\n    Schema: [Function],\n    model: [Function (anonymous)],\n    plugins: [Array],\n    default: [Circular *1],\n    mongoose: [Circular *1],\n    cast: [Function: cast],\n    STATES: [Object: null prototype],\n    setDriver: [Function: setDriver],\n    set: [Function (anonymous)],\n    get: [Function (anonymous)],\n    createConnection: [Function (anonymous)],\n    connect: [AsyncFunction: connect],\n    disconnect: [AsyncFunction: disconnect],\n    startSession: [Function (anonymous)],\n    pluralize: [Function (anonymous)],\n    deleteModel: [Function (anonymous)],\n    modelNames: [Function (anonymous)],\n    plugin: [Function (anonymous)],\n    version: '8.4.3',\n    Mongoose: [Function: Mongoose],\n    SchemaType: [Function],\n    SchemaTypes: [Object],\n    VirtualType: [Function: VirtualType],\n    Types: [Object],\n    Query: [Function],\n    Model: [Function],\n    Document: [Function],\n    ObjectId: [Function],\n    isValidObjectId: [Function (anonymous)],\n    isObjectIdOrHexString: [Function (anonymous)],\n    syncIndexes: [Function (anonymous)],\n    Decimal128: [Function],\n    Mixed: [Function],\n    Date: [Function],\n    Number: [Function],\n    Error: [Function],\n    MongooseError: [Function],\n    now: [Function: now],\n    CastError: [class CastError extends MongooseError],\n    SchemaTypeOptions: [class SchemaTypeOptions],\n    mongo: [Object],\n    mquery: [Function],\n    sanitizeFilter: [Function: sanitizeFilter],\n    trusted: [Function: trusted],\n    skipMiddlewareFunction: [Function: skipWrappedFunction],\n    overwriteMiddlewareResult: [Function: overwriteResult]\n  },\n  modelName: 'TextBuffer',\n  model: [Function: model],\n  db: NativeConnection {\n    base: [Mongoose],\n    collections: [Object],\n    models: [Object],\n    config: {},\n    replica: false,\n    options: null,\n    otherDbs: [],\n    relatedDbs: {},\n    states: [Object: null prototype],\n    _readyState: 0,\n    _closeCalled: false,\n    _hasOpened: false,\n    plugins: [],\n    id: 0,\n    _queue: [Array],\n    _listening: false\n  },\n  discriminators: undefined,\n  events: EventEmitter {\n    _events: [Object: null prototype] {},\n    _eventsCount: 0,\n    _maxListeners: undefined,\n    [Symbol(kCapture)]: false\n  },\n  '$appliedMethods': true,\n  '$appliedHooks': true,\n  _middleware: Kareem { _pres: [Map], _posts: [Map] },\n  '$__insertMany': [Function (anonymous)],\n  schema: Schema {\n    obj: [Object],\n    paths: [Object],\n    aliases: {},\n    subpaths: [Object],\n    virtuals: [Object],\n    singleNestedPaths: {},\n    nested: {},\n    inherits: {},\n    callQueue: [],\n    _indexes: [],\n    _searchIndexes: [],\n    methods: [Object],\n    methodOptions: {},\n    statics: {},\n    tree: [Object],\n    query: {},\n    childSchemas: [],\n    plugins: [Array],\n    '$id': 40,\n    mapPaths: [],\n    s: [Object],\n    _userProvidedOptions: [Object],\n    options: [Object],\n    '$timestamps': [Object],\n    '$globalPluginsApplied': true\n  },\n  collection: Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'TextBuffer',\n    _closed: false,\n    opts: [Object],\n    name: 'textbuffers',\n    collectionName: 'textbuffers',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  '$__collection': Collection {\n    collection: null,\n    Promise: [Function: Promise],\n    modelName: 'TextBuffer',\n    _closed: false,\n    opts: [Object],\n    name: 'textbuffers',\n    collectionName: 'textbuffers',\n    conn: [NativeConnection],\n    queue: [],\n    buffer: true,\n    emitter: [EventEmitter]\n  },\n  Query: [Function (anonymous)] { base: [Object] },\n  '$init': Promise { <pending>, catch: [Function (anonymous)] },\n  '$caught': true,\n  [Symbol(mongoose#Model)]: true\n}"},"elapsed":0.00016887509264051914},{"event":"call","id":209,"thread_id":0,"method_id":"genAbsolutePath","static":true,"parameters":[{"class":"String","value":"'../uploads'","name":"relativePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":14},{"event":"return","thread_id":0,"id":210,"parent_id":209,"return_value":{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/uploads'"},"elapsed":0.000018124934285879135},{"event":"call","id":211,"thread_id":0,"method_id":"genAbsolutePath","static":true,"parameters":[{"class":"String","value":"'../static'","name":"relativePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":14},{"event":"return","thread_id":0,"id":212,"parent_id":211,"return_value":{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/static'"},"elapsed":0.0000035830307751893997},{"event":"call","id":213,"thread_id":0,"method_id":"genAbsolutePath","static":true,"parameters":[{"class":"String","value":"'../generated'","name":"relativePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":14},{"event":"return","thread_id":0,"id":214,"parent_id":213,"return_value":{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/generated'"},"elapsed":0.000002874992787837982},{"event":"call","id":215,"thread_id":0,"method_id":"genAbsolutePath","static":true,"parameters":[{"class":"String","value":"'../public'","name":"relativePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":14},{"event":"return","thread_id":0,"id":216,"parent_id":215,"return_value":{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/public'"},"elapsed":0.000002749962732195854},{"event":"call","id":217,"thread_id":0,"method_id":"createStorage","static":true,"parameters":[{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/uploads'","name":"absolutePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":4},{"event":"return","thread_id":0,"id":218,"parent_id":217,"return_value":{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":104},"elapsed":0.00002308306284248829},{"event":"call","id":219,"thread_id":0,"method_id":"createStorage","static":true,"parameters":[{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/static'","name":"absolutePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":4},{"event":"return","thread_id":0,"id":220,"parent_id":219,"return_value":{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":105},"elapsed":0.000002749962732195854},{"event":"call","id":221,"thread_id":0,"method_id":"createStorage","static":true,"parameters":[{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/generated'","name":"absolutePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":4},{"event":"return","thread_id":0,"id":222,"parent_id":221,"return_value":{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":106},"elapsed":0.0000021670712158083916},{"event":"call","id":223,"thread_id":0,"method_id":"createStorage","static":true,"parameters":[{"class":"String","value":"'/Users/reedvogt/Desktop/cover-letter-generator2/src/public'","name":"absolutePath"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":4},{"event":"return","thread_id":0,"id":224,"parent_id":223,"return_value":{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":107},"elapsed":0.0000019579892978072166},{"event":"call","id":225,"thread_id":0,"method_id":"createMulterConfig","static":true,"parameters":[{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":104,"name":"storage"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":25},{"event":"return","thread_id":0,"id":226,"parent_id":225,"return_value":{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":108},"elapsed":0.000021499930880963802},{"event":"call","id":227,"thread_id":0,"method_id":"createMulterConfig","static":true,"parameters":[{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":105,"name":"storage"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":25},{"event":"return","thread_id":0,"id":228,"parent_id":227,"return_value":{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":109},"elapsed":0.000003750086762011051},{"event":"call","id":229,"thread_id":0,"method_id":"createMulterConfig","static":true,"parameters":[{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":106,"name":"storage"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":25},{"event":"return","thread_id":0,"id":230,"parent_id":229,"return_value":{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":110},"elapsed":0.000002374988980591297},{"event":"call","id":231,"thread_id":0,"method_id":"createMulterConfig","static":true,"parameters":[{"class":"DiskStorage","value":"DiskStorage {\n  getFilename: [Function: filename],\n  getDestination: [Function: destination]\n}","object_id":107,"name":"storage"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":25},{"event":"return","thread_id":0,"id":232,"parent_id":231,"return_value":{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":111},"elapsed":0.000002125045284628868},{"event":"call","id":233,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":108,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":234,"parent_id":233,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":0.00001091696321964264},{"event":"call","id":235,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":109,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":236,"parent_id":235,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.660120561718941e-7},{"event":"call","id":237,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":110,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":238,"parent_id":237,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":7.080379873514175e-7},{"event":"call","id":239,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":111,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":240,"parent_id":239,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.660120561718941e-7},{"event":"call","id":241,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":108,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":242,"parent_id":241,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.660120561718941e-7},{"event":"call","id":243,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":109,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":244,"parent_id":243,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":5.830079317092896e-7},{"event":"call","id":245,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":110,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":246,"parent_id":245,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.670597940683365e-7},{"event":"call","id":247,"thread_id":0,"method_id":"handleSingleUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":111,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":37},{"event":"return","thread_id":0,"id":248,"parent_id":247,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":5.83939254283905e-7},{"event":"call","id":249,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":108,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":250,"parent_id":249,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":0.000010166899301111698},{"event":"call","id":251,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":109,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":252,"parent_id":251,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.249174475669861e-7},{"event":"call","id":253,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":110,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":254,"parent_id":253,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.249174475669861e-7},{"event":"call","id":255,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":111,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":256,"parent_id":255,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.25033862888813e-7},{"event":"call","id":257,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":108,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":258,"parent_id":257,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.25033862888813e-7},{"event":"call","id":259,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":109,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":260,"parent_id":259,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.669433787465096e-7},{"event":"call","id":261,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":110,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":262,"parent_id":261,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":5.830079317092896e-7},{"event":"call","id":263,"thread_id":0,"method_id":"handleArrayUpload","static":true,"parameters":[{"class":"Multer","value":"Multer {\n  storage: DiskStorage {\n    getFilename: [Function: filename],\n    getDestination: [Function: destination]\n  },\n  limits: { fileSize: 6000000 },\n  preservePath: undefined,\n  fileFilter: [Function: allowAll]\n}","object_id":111,"name":"uploadFunction"}],"defined_class":"uploads","path":"src/middlewares/uploads.js","lineno":48},{"event":"return","thread_id":0,"id":264,"parent_id":263,"return_value":{"class":"Function","value":"[Function (anonymous)]"},"elapsed":6.25033862888813e-7},{"event":"call","id":265,"thread_id":0,"method_id":"middlewares","static":true,"parameters":[{"class":"EventEmitter","value":"<ref *1> [Function: app] {\n  _events: [Object: null prototype] { mount: [Function: onmount] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  setMaxListeners: [Function: setMaxListeners],\n  getMaxListeners: [Function: getMaxListeners],\n  emit: [Function: emit],\n  addListener: [Function: addListener],\n  on: [Function: addListener],\n  prependListener: [Function: prependListener],\n  once: [Function: once],\n  prependOnceListener: [Function: prependOnceListener],\n  removeListener: [Function: removeListener],\n  off: [Function: removeListener],\n  removeAllListeners: [Function: removeAllListeners],\n  listeners: [Function: listeners],\n  rawListeners: [Function: rawListeners],\n  listenerCount: [Function: listenerCount],\n  eventNames: [Function: eventNames],\n  init: [Function: init],\n  defaultConfiguration: [Function: defaultConfiguration],\n  lazyrouter: [Function: lazyrouter],\n  handle: [Function: handle],\n  use: [Function: use],\n  route: [Function: route],\n  engine: [Function: engine],\n  param: [Function: param],\n  set: [Function: set],\n  path: [Function: path],\n  enabled: [Function: enabled],\n  disabled: [Function: disabled],\n  enable: [Function: enable],\n  disable: [Function: disable],\n  acl: [Function (anonymous)],\n  bind: [Function (anonymous)],\n  checkout: [Function (anonymous)],\n  connect: [Function (anonymous)],\n  copy: [Function (anonymous)],\n  delete: [Function (anonymous)],\n  get: [Function (anonymous)],\n  head: [Function (anonymous)],\n  link: [Function (anonymous)],\n  lock: [Function (anonymous)],\n  'm-search': [Function (anonymous)],\n  merge: [Function (anonymous)],\n  mkactivity: [Function (anonymous)],\n  mkcalendar: [Function (anonymous)],\n  mkcol: [Function (anonymous)],\n  move: [Function (anonymous)],\n  notify: [Function (anonymous)],\n  options: [Function (anonymous)],\n  patch: [Function (anonymous)],\n  post: [Function (anonymous)],\n  propfind: [Function (anonymous)],\n  proppatch: [Function (anonymous)],\n  purge: [Function (anonymous)],\n  put: [Function (anonymous)],\n  rebind: [Function (anonymous)],\n  report: [Function (anonymous)],\n  search: [Function (anonymous)],\n  source: [Function (anonymous)],\n  subscribe: [Function (anonymous)],\n  trace: [Function (anonymous)],\n  unbind: [Function (anonymous)],\n  unlink: [Function (anonymous)],\n  unlock: [Function (anonymous)],\n  unsubscribe: [Function (anonymous)],\n  all: [Function: all],\n  del: [Function (anonymous)],\n  render: [Function: render],\n  listen: [Function: listen],\n  request: IncomingMessage { app: [Circular *1] },\n  response: ServerResponse { app: [Circular *1] },\n  cache: {},\n  engines: {},\n  settings: {\n    'x-powered-by': true,\n    etag: 'weak',\n    'etag fn': [Function: generateETag],\n    env: 'development',\n    'query parser': 'extended',\n    'query parser fn': [Function: parseExtendedQueryString],\n    'subdomain offset': 2,\n    'trust proxy': false,\n    'trust proxy fn': [Function: trustNone],\n    view: [Function: View],\n    views: '/Users/reedvogt/Desktop/cover-letter-generator2/views',\n    'jsonp callback name': 'callback'\n  },\n  locals: [Object: null prototype] { settings: [Object] },\n  mountpath: '/'\n}","name":"app"}],"defined_class":"index","path":"src/middlewares/index.js","lineno":15},{"event":"return","thread_id":0,"id":266,"parent_id":265,"elapsed":0.003520290949381888},{"event":"call","id":267,"thread_id":0,"method_id":"setupRoutes","static":true,"parameters":[{"class":"EventEmitter","value":"<ref *1> [Function: app] {\n  _events: [Object: null prototype] { mount: [Function: onmount] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  setMaxListeners: [Function: setMaxListeners],\n  getMaxListeners: [Function: getMaxListeners],\n  emit: [Function: emit],\n  addListener: [Function: addListener],\n  on: [Function: addListener],\n  prependListener: [Function: prependListener],\n  once: [Function: once],\n  prependOnceListener: [Function: prependOnceListener],\n  removeListener: [Function: removeListener],\n  off: [Function: removeListener],\n  removeAllListeners: [Function: removeAllListeners],\n  listeners: [Function: listeners],\n  rawListeners: [Function: rawListeners],\n  listenerCount: [Function: listenerCount],\n  eventNames: [Function: eventNames],\n  init: [Function: init],\n  defaultConfiguration: [Function: defaultConfiguration],\n  lazyrouter: [Function: lazyrouter],\n  handle: [Function: handle],\n  use: [Function: use],\n  route: [Function: route],\n  engine: [Function: engine],\n  param: [Function: param],\n  set: [Function: set],\n  path: [Function: path],\n  enabled: [Function: enabled],\n  disabled: [Function: disabled],\n  enable: [Function: enable],\n  disable: [Function: disable],\n  acl: [Function (anonymous)],\n  bind: [Function (anonymous)],\n  checkout: [Function (anonymous)],\n  connect: [Function (anonymous)],\n  copy: [Function (anonymous)],\n  delete: [Function (anonymous)],\n  get: [Function (anonymous)],\n  head: [Function (anonymous)],\n  link: [Function (anonymous)],\n  lock: [Function (anonymous)],\n  'm-search': [Function (anonymous)],\n  merge: [Function (anonymous)],\n  mkactivity: [Function (anonymous)],\n  mkcalendar: [Function (anonymous)],\n  mkcol: [Function (anonymous)],\n  move: [Function (anonymous)],\n  notify: [Function (anonymous)],\n  options: [Function (anonymous)],\n  patch: [Function (anonymous)],\n  post: [Function (anonymous)],\n  propfind: [Function (anonymous)],\n  proppatch: [Function (anonymous)],\n  purge: [Function (anonymous)],\n  put: [Function (anonymous)],\n  rebind: [Function (anonymous)],\n  report: [Function (anonymous)],\n  search: [Function (anonymous)],\n  source: [Function (anonymous)],\n  subscribe: [Function (anonymous)],\n  trace: [Function (anonymous)],\n  unbind: [Function (anonymous)],\n  unlink: [Function (anonymous)],\n  unlock: [Function (anonymous)],\n  unsubscribe: [Function (anonymous)],\n  all: [Function: all],\n  del: [Function (anonymous)],\n  render: [Function: render],\n  listen: [Function: listen],\n  request: IncomingMessage { app: [Circular *1] },\n  response: ServerResponse { app: [Circular *1] },\n  cache: {},\n  engines: {},\n  settings: {\n    'x-powered-by': true,\n    etag: 'weak',\n    'etag fn': [Function: generateETag],\n    env: 'development',\n    'query parser': 'extended',\n    'query parser fn': [Function: parseExtendedQueryString],\n    'subdomain offset': 2,\n    'trust proxy': false,\n    'trust proxy fn': [Function: trustNone],\n    view: [Function: View],\n    views: '/Users/reedvogt/Desktop/cover-letter-generator2/views',\n    'jsonp callback name': 'callback'\n  },\n  locals: [Object: null prototype] { settings: [Object] },\n  mountpath: '/',\n  _router: [Function: router] {\n    params: {},\n    _params: [],\n    caseSensitive: false,\n    mergeParams: undefined,\n    strict: false,\n    stack: [Array]\n  }\n}","name":"app"}],"defined_class":"index","path":"src/routes/index.js","lineno":9},{"event":"return","thread_id":0,"id":268,"parent_id":267,"elapsed":0.000031291041523218155},{"event":"call","id":269,"thread_id":0,"method_id":"main","static":true,"parameters":[],"defined_class":"index","path":"index.js","lineno":8},{"event":"call","id":270,"thread_id":0,"method_id":"connectDB","static":true,"parameters":[],"defined_class":"index","path":"src/db/index.js","lineno":5},{"event":"return","thread_id":0,"id":271,"parent_id":270,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":112},"elapsed":0.0067650420824065804},{"event":"return","thread_id":0,"id":272,"parent_id":269,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":113},"elapsed":0.007062041899189353},{"event":"call","id":273,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":274,"parent_id":273,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.0005432079778984189},{"event":"call","id":275,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":276,"parent_id":275,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.00004370801616460085},{"event":"call","id":277,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":278,"parent_id":277,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.000017166021279990673},{"event":"call","id":279,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":280,"parent_id":279,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.0000112500274553895},{"event":"call","id":281,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":282,"parent_id":281,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.000018625054508447647},{"event":"call","id":283,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":284,"parent_id":283,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.00001466704998165369},{"event":"call","id":285,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":286,"parent_id":285,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.0000552500132471323},{"event":"call","id":287,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":288,"parent_id":287,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.00001733400858938694},{"event":"call","id":289,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":290,"parent_id":289,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.0000980000477284193},{"event":"call","id":291,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":292,"parent_id":291,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.000016000005416572094},{"event":"call","id":293,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":294,"parent_id":293,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.000008584000170230865},{"event":"call","id":295,"thread_id":0,"method_id":"timestampFormat","static":true,"parameters":[],"defined_class":"index","path":"src/config/logging/index.js","lineno":9},{"event":"return","thread_id":0,"id":296,"parent_id":295,"return_value":{"class":"String","value":"'00:44'"},"elapsed":0.00009325006976723671},{"event":"call","id":297,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection users]","object_id":114},"parameters":[{"class":"Object","properties":[{"name":"username","class":"Number"}],"value":"{ username: 1 }","object_id":115,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":116,"name":"options"}],"defined_class":"users","lineno":1,"path":"mongodb/users"},{"event":"return","thread_id":0,"id":298,"parent_id":297,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":117},"elapsed":0.0015147920930758119},{"event":"call","id":299,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection chatsessions]","object_id":118},"parameters":[{"class":"Object","properties":[{"name":"userId","class":"Number"},{"name":"workspaceId","class":"Number"},{"name":"name","class":"Number"}],"value":"{ userId: 1, workspaceId: 1, name: 1 }","object_id":119,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":120,"name":"options"}],"defined_class":"chatsessions","lineno":2,"path":"mongodb/chatsessions"},{"event":"return","thread_id":0,"id":300,"parent_id":299,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":121},"elapsed":0.00027062499430030584},{"event":"call","id":301,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection folders]","object_id":122},"parameters":[{"class":"Object","properties":[{"name":"name","class":"Number"}],"value":"{ name: 1 }","object_id":123,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":124,"name":"options"}],"defined_class":"folders","lineno":3,"path":"mongodb/folders"},{"event":"return","thread_id":0,"id":302,"parent_id":301,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":125},"elapsed":0.00011720799375325441},{"event":"call","id":303,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection users]","object_id":114},"parameters":[{"class":"Object","properties":[{"name":"email","class":"Number"}],"value":"{ email: 1 }","object_id":126,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":127,"name":"options"}],"defined_class":"users","lineno":1,"path":"mongodb/users"},{"event":"return","thread_id":0,"id":304,"parent_id":303,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":128},"elapsed":0.00010166701395064592},{"event":"call","id":305,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection users]","object_id":114},"parameters":[{"class":"Object","properties":[{"name":"email","class":"Number"}],"value":"{ email: 1 }","object_id":129,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":130,"name":"options"}],"defined_class":"users","lineno":1,"path":"mongodb/users"},{"event":"return","thread_id":0,"id":306,"parent_id":305,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":131},"elapsed":0.00010254199150949717},{"event":"call","id":307,"thread_id":0,"method_id":"createIndex","static":false,"receiver":{"class":"Collection","value":"[Collection users]","object_id":114},"parameters":[{"class":"Object","properties":[{"name":"username","class":"Number"}],"value":"{ username: 1 }","object_id":132,"name":"indexSpec"},{"class":"Object","properties":[{"name":"unique","class":"Boolean"},{"name":"background","class":"Boolean"}],"value":"{ unique: true, background: true }","object_id":133,"name":"options"}],"defined_class":"users","lineno":1,"path":"mongodb/users"},{"event":"return","thread_id":0,"id":308,"parent_id":307,"return_value":{"class":"Promise","value":"Promise { <pending> }","object_id":134},"elapsed":0.00021062500309199095}